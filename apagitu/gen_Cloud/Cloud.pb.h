// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cloud.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Cloud_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Cloud_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Cloud_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Cloud_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Cloud_2eproto;
namespace Cloud {
class pesan_client;
struct pesan_clientDefaultTypeInternal;
extern pesan_clientDefaultTypeInternal _pesan_client_default_instance_;
class pesan_server;
struct pesan_serverDefaultTypeInternal;
extern pesan_serverDefaultTypeInternal _pesan_server_default_instance_;
}  // namespace Cloud
PROTOBUF_NAMESPACE_OPEN
template<> ::Cloud::pesan_client* Arena::CreateMaybeMessage<::Cloud::pesan_client>(Arena*);
template<> ::Cloud::pesan_server* Arena::CreateMaybeMessage<::Cloud::pesan_server>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Cloud {

// ===================================================================

class pesan_client final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cloud.pesan_client) */ {
 public:
  inline pesan_client() : pesan_client(nullptr) {}
  ~pesan_client() override;
  explicit PROTOBUF_CONSTEXPR pesan_client(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pesan_client(const pesan_client& from);
  pesan_client(pesan_client&& from) noexcept
    : pesan_client() {
    *this = ::std::move(from);
  }

  inline pesan_client& operator=(const pesan_client& from) {
    CopyFrom(from);
    return *this;
  }
  inline pesan_client& operator=(pesan_client&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pesan_client& default_instance() {
    return *internal_default_instance();
  }
  static inline const pesan_client* internal_default_instance() {
    return reinterpret_cast<const pesan_client*>(
               &_pesan_client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pesan_client& a, pesan_client& b) {
    a.Swap(&b);
  }
  inline void Swap(pesan_client* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pesan_client* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pesan_client* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pesan_client>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pesan_client& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const pesan_client& from) {
    pesan_client::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pesan_client* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cloud.pesan_client";
  }
  protected:
  explicit pesan_client(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsetFieldNumber = 2,
    kRuteFieldNumber = 3,
    kIdParamLamaFieldNumber = 4,
    kIdTipeParamFieldNumber = 5,
    kIdRuteLamaFieldNumber = 6,
    kTimestampFieldNumber = 7,
    kSiklusFieldNumber = 8,
    kHeaderPesanFieldNumber = 1,
    kJumlahDataFieldNumber = 9,
  };
  // repeated string aset = 2;
  int aset_size() const;
  private:
  int _internal_aset_size() const;
  public:
  void clear_aset();
  const std::string& aset(int index) const;
  std::string* mutable_aset(int index);
  void set_aset(int index, const std::string& value);
  void set_aset(int index, std::string&& value);
  void set_aset(int index, const char* value);
  void set_aset(int index, const char* value, size_t size);
  std::string* add_aset();
  void add_aset(const std::string& value);
  void add_aset(std::string&& value);
  void add_aset(const char* value);
  void add_aset(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aset();
  private:
  const std::string& _internal_aset(int index) const;
  std::string* _internal_add_aset();
  public:

  // repeated string rute = 3;
  int rute_size() const;
  private:
  int _internal_rute_size() const;
  public:
  void clear_rute();
  const std::string& rute(int index) const;
  std::string* mutable_rute(int index);
  void set_rute(int index, const std::string& value);
  void set_rute(int index, std::string&& value);
  void set_rute(int index, const char* value);
  void set_rute(int index, const char* value, size_t size);
  std::string* add_rute();
  void add_rute(const std::string& value);
  void add_rute(std::string&& value);
  void add_rute(const char* value);
  void add_rute(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rute() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rute();
  private:
  const std::string& _internal_rute(int index) const;
  std::string* _internal_add_rute();
  public:

  // repeated int32 id_param_lama = 4;
  int id_param_lama_size() const;
  private:
  int _internal_id_param_lama_size() const;
  public:
  void clear_id_param_lama();
  private:
  int32_t _internal_id_param_lama(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_id_param_lama() const;
  void _internal_add_id_param_lama(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_id_param_lama();
  public:
  int32_t id_param_lama(int index) const;
  void set_id_param_lama(int index, int32_t value);
  void add_id_param_lama(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      id_param_lama() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_id_param_lama();

  // repeated int32 id_tipe_param = 5;
  int id_tipe_param_size() const;
  private:
  int _internal_id_tipe_param_size() const;
  public:
  void clear_id_tipe_param();
  private:
  int32_t _internal_id_tipe_param(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_id_tipe_param() const;
  void _internal_add_id_tipe_param(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_id_tipe_param();
  public:
  int32_t id_tipe_param(int index) const;
  void set_id_tipe_param(int index, int32_t value);
  void add_id_tipe_param(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      id_tipe_param() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_id_tipe_param();

  // repeated int32 id_rute_lama = 6;
  int id_rute_lama_size() const;
  private:
  int _internal_id_rute_lama_size() const;
  public:
  void clear_id_rute_lama();
  private:
  int32_t _internal_id_rute_lama(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_id_rute_lama() const;
  void _internal_add_id_rute_lama(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_id_rute_lama();
  public:
  int32_t id_rute_lama(int index) const;
  void set_id_rute_lama(int index, int32_t value);
  void add_id_rute_lama(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      id_rute_lama() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_id_rute_lama();

  // repeated int32 timestamp = 7;
  int timestamp_size() const;
  private:
  int _internal_timestamp_size() const;
  public:
  void clear_timestamp();
  private:
  int32_t _internal_timestamp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_timestamp() const;
  void _internal_add_timestamp(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_timestamp();
  public:
  int32_t timestamp(int index) const;
  void set_timestamp(int index, int32_t value);
  void add_timestamp(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_timestamp();

  // repeated int32 siklus = 8;
  int siklus_size() const;
  private:
  int _internal_siklus_size() const;
  public:
  void clear_siklus();
  private:
  int32_t _internal_siklus(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_siklus() const;
  void _internal_add_siklus(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_siklus();
  public:
  int32_t siklus(int index) const;
  void set_siklus(int index, int32_t value);
  void add_siklus(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      siklus() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_siklus();

  // string header_pesan = 1;
  void clear_header_pesan();
  const std::string& header_pesan() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header_pesan(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header_pesan();
  PROTOBUF_NODISCARD std::string* release_header_pesan();
  void set_allocated_header_pesan(std::string* header_pesan);
  private:
  const std::string& _internal_header_pesan() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header_pesan(const std::string& value);
  std::string* _internal_mutable_header_pesan();
  public:

  // int32 jumlah_data = 9;
  void clear_jumlah_data();
  int32_t jumlah_data() const;
  void set_jumlah_data(int32_t value);
  private:
  int32_t _internal_jumlah_data() const;
  void _internal_set_jumlah_data(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Cloud.pesan_client)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aset_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rute_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > id_param_lama_;
    mutable std::atomic<int> _id_param_lama_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > id_tipe_param_;
    mutable std::atomic<int> _id_tipe_param_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > id_rute_lama_;
    mutable std::atomic<int> _id_rute_lama_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > timestamp_;
    mutable std::atomic<int> _timestamp_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > siklus_;
    mutable std::atomic<int> _siklus_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_pesan_;
    int32_t jumlah_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Cloud_2eproto;
};
// -------------------------------------------------------------------

class pesan_server final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cloud.pesan_server) */ {
 public:
  inline pesan_server() : pesan_server(nullptr) {}
  ~pesan_server() override;
  explicit PROTOBUF_CONSTEXPR pesan_server(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pesan_server(const pesan_server& from);
  pesan_server(pesan_server&& from) noexcept
    : pesan_server() {
    *this = ::std::move(from);
  }

  inline pesan_server& operator=(const pesan_server& from) {
    CopyFrom(from);
    return *this;
  }
  inline pesan_server& operator=(pesan_server&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pesan_server& default_instance() {
    return *internal_default_instance();
  }
  static inline const pesan_server* internal_default_instance() {
    return reinterpret_cast<const pesan_server*>(
               &_pesan_server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(pesan_server& a, pesan_server& b) {
    a.Swap(&b);
  }
  inline void Swap(pesan_server* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pesan_server* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pesan_server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pesan_server>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pesan_server& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const pesan_server& from) {
    pesan_server::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pesan_server* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cloud.pesan_server";
  }
  protected:
  explicit pesan_server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsetFieldNumber = 2,
    kRuteFieldNumber = 3,
    kIdParamLamaFieldNumber = 4,
    kIdTipeParamFieldNumber = 5,
    kIdRuteLamaFieldNumber = 6,
    kTimestampFieldNumber = 7,
    kSiklusFieldNumber = 8,
    kHeaderPesanFieldNumber = 1,
    kJumlahDataFieldNumber = 9,
  };
  // repeated string aset = 2;
  int aset_size() const;
  private:
  int _internal_aset_size() const;
  public:
  void clear_aset();
  const std::string& aset(int index) const;
  std::string* mutable_aset(int index);
  void set_aset(int index, const std::string& value);
  void set_aset(int index, std::string&& value);
  void set_aset(int index, const char* value);
  void set_aset(int index, const char* value, size_t size);
  std::string* add_aset();
  void add_aset(const std::string& value);
  void add_aset(std::string&& value);
  void add_aset(const char* value);
  void add_aset(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aset();
  private:
  const std::string& _internal_aset(int index) const;
  std::string* _internal_add_aset();
  public:

  // repeated string rute = 3;
  int rute_size() const;
  private:
  int _internal_rute_size() const;
  public:
  void clear_rute();
  const std::string& rute(int index) const;
  std::string* mutable_rute(int index);
  void set_rute(int index, const std::string& value);
  void set_rute(int index, std::string&& value);
  void set_rute(int index, const char* value);
  void set_rute(int index, const char* value, size_t size);
  std::string* add_rute();
  void add_rute(const std::string& value);
  void add_rute(std::string&& value);
  void add_rute(const char* value);
  void add_rute(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rute() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rute();
  private:
  const std::string& _internal_rute(int index) const;
  std::string* _internal_add_rute();
  public:

  // repeated int32 id_param_lama = 4;
  int id_param_lama_size() const;
  private:
  int _internal_id_param_lama_size() const;
  public:
  void clear_id_param_lama();
  private:
  int32_t _internal_id_param_lama(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_id_param_lama() const;
  void _internal_add_id_param_lama(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_id_param_lama();
  public:
  int32_t id_param_lama(int index) const;
  void set_id_param_lama(int index, int32_t value);
  void add_id_param_lama(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      id_param_lama() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_id_param_lama();

  // repeated int32 id_tipe_param = 5;
  int id_tipe_param_size() const;
  private:
  int _internal_id_tipe_param_size() const;
  public:
  void clear_id_tipe_param();
  private:
  int32_t _internal_id_tipe_param(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_id_tipe_param() const;
  void _internal_add_id_tipe_param(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_id_tipe_param();
  public:
  int32_t id_tipe_param(int index) const;
  void set_id_tipe_param(int index, int32_t value);
  void add_id_tipe_param(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      id_tipe_param() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_id_tipe_param();

  // repeated int32 id_rute_lama = 6;
  int id_rute_lama_size() const;
  private:
  int _internal_id_rute_lama_size() const;
  public:
  void clear_id_rute_lama();
  private:
  int32_t _internal_id_rute_lama(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_id_rute_lama() const;
  void _internal_add_id_rute_lama(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_id_rute_lama();
  public:
  int32_t id_rute_lama(int index) const;
  void set_id_rute_lama(int index, int32_t value);
  void add_id_rute_lama(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      id_rute_lama() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_id_rute_lama();

  // repeated int32 timestamp = 7;
  int timestamp_size() const;
  private:
  int _internal_timestamp_size() const;
  public:
  void clear_timestamp();
  private:
  int32_t _internal_timestamp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_timestamp() const;
  void _internal_add_timestamp(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_timestamp();
  public:
  int32_t timestamp(int index) const;
  void set_timestamp(int index, int32_t value);
  void add_timestamp(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_timestamp();

  // repeated int32 siklus = 8;
  int siklus_size() const;
  private:
  int _internal_siklus_size() const;
  public:
  void clear_siklus();
  private:
  int32_t _internal_siklus(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_siklus() const;
  void _internal_add_siklus(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_siklus();
  public:
  int32_t siklus(int index) const;
  void set_siklus(int index, int32_t value);
  void add_siklus(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      siklus() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_siklus();

  // string header_pesan = 1;
  void clear_header_pesan();
  const std::string& header_pesan() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header_pesan(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header_pesan();
  PROTOBUF_NODISCARD std::string* release_header_pesan();
  void set_allocated_header_pesan(std::string* header_pesan);
  private:
  const std::string& _internal_header_pesan() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header_pesan(const std::string& value);
  std::string* _internal_mutable_header_pesan();
  public:

  // int32 jumlah_data = 9;
  void clear_jumlah_data();
  int32_t jumlah_data() const;
  void set_jumlah_data(int32_t value);
  private:
  int32_t _internal_jumlah_data() const;
  void _internal_set_jumlah_data(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Cloud.pesan_server)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aset_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rute_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > id_param_lama_;
    mutable std::atomic<int> _id_param_lama_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > id_tipe_param_;
    mutable std::atomic<int> _id_tipe_param_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > id_rute_lama_;
    mutable std::atomic<int> _id_rute_lama_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > timestamp_;
    mutable std::atomic<int> _timestamp_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > siklus_;
    mutable std::atomic<int> _siklus_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_pesan_;
    int32_t jumlah_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Cloud_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pesan_client

// string header_pesan = 1;
inline void pesan_client::clear_header_pesan() {
  _impl_.header_pesan_.ClearToEmpty();
}
inline const std::string& pesan_client::header_pesan() const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_client.header_pesan)
  return _internal_header_pesan();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pesan_client::set_header_pesan(ArgT0&& arg0, ArgT... args) {
 
 _impl_.header_pesan_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Cloud.pesan_client.header_pesan)
}
inline std::string* pesan_client::mutable_header_pesan() {
  std::string* _s = _internal_mutable_header_pesan();
  // @@protoc_insertion_point(field_mutable:Cloud.pesan_client.header_pesan)
  return _s;
}
inline const std::string& pesan_client::_internal_header_pesan() const {
  return _impl_.header_pesan_.Get();
}
inline void pesan_client::_internal_set_header_pesan(const std::string& value) {
  
  _impl_.header_pesan_.Set(value, GetArenaForAllocation());
}
inline std::string* pesan_client::_internal_mutable_header_pesan() {
  
  return _impl_.header_pesan_.Mutable(GetArenaForAllocation());
}
inline std::string* pesan_client::release_header_pesan() {
  // @@protoc_insertion_point(field_release:Cloud.pesan_client.header_pesan)
  return _impl_.header_pesan_.Release();
}
inline void pesan_client::set_allocated_header_pesan(std::string* header_pesan) {
  if (header_pesan != nullptr) {
    
  } else {
    
  }
  _impl_.header_pesan_.SetAllocated(header_pesan, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.header_pesan_.IsDefault()) {
    _impl_.header_pesan_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Cloud.pesan_client.header_pesan)
}

// repeated string aset = 2;
inline int pesan_client::_internal_aset_size() const {
  return _impl_.aset_.size();
}
inline int pesan_client::aset_size() const {
  return _internal_aset_size();
}
inline void pesan_client::clear_aset() {
  _impl_.aset_.Clear();
}
inline std::string* pesan_client::add_aset() {
  std::string* _s = _internal_add_aset();
  // @@protoc_insertion_point(field_add_mutable:Cloud.pesan_client.aset)
  return _s;
}
inline const std::string& pesan_client::_internal_aset(int index) const {
  return _impl_.aset_.Get(index);
}
inline const std::string& pesan_client::aset(int index) const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_client.aset)
  return _internal_aset(index);
}
inline std::string* pesan_client::mutable_aset(int index) {
  // @@protoc_insertion_point(field_mutable:Cloud.pesan_client.aset)
  return _impl_.aset_.Mutable(index);
}
inline void pesan_client::set_aset(int index, const std::string& value) {
  _impl_.aset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_client.aset)
}
inline void pesan_client::set_aset(int index, std::string&& value) {
  _impl_.aset_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Cloud.pesan_client.aset)
}
inline void pesan_client::set_aset(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.aset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cloud.pesan_client.aset)
}
inline void pesan_client::set_aset(int index, const char* value, size_t size) {
  _impl_.aset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cloud.pesan_client.aset)
}
inline std::string* pesan_client::_internal_add_aset() {
  return _impl_.aset_.Add();
}
inline void pesan_client::add_aset(const std::string& value) {
  _impl_.aset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cloud.pesan_client.aset)
}
inline void pesan_client::add_aset(std::string&& value) {
  _impl_.aset_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Cloud.pesan_client.aset)
}
inline void pesan_client::add_aset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.aset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cloud.pesan_client.aset)
}
inline void pesan_client::add_aset(const char* value, size_t size) {
  _impl_.aset_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cloud.pesan_client.aset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
pesan_client::aset() const {
  // @@protoc_insertion_point(field_list:Cloud.pesan_client.aset)
  return _impl_.aset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
pesan_client::mutable_aset() {
  // @@protoc_insertion_point(field_mutable_list:Cloud.pesan_client.aset)
  return &_impl_.aset_;
}

// repeated string rute = 3;
inline int pesan_client::_internal_rute_size() const {
  return _impl_.rute_.size();
}
inline int pesan_client::rute_size() const {
  return _internal_rute_size();
}
inline void pesan_client::clear_rute() {
  _impl_.rute_.Clear();
}
inline std::string* pesan_client::add_rute() {
  std::string* _s = _internal_add_rute();
  // @@protoc_insertion_point(field_add_mutable:Cloud.pesan_client.rute)
  return _s;
}
inline const std::string& pesan_client::_internal_rute(int index) const {
  return _impl_.rute_.Get(index);
}
inline const std::string& pesan_client::rute(int index) const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_client.rute)
  return _internal_rute(index);
}
inline std::string* pesan_client::mutable_rute(int index) {
  // @@protoc_insertion_point(field_mutable:Cloud.pesan_client.rute)
  return _impl_.rute_.Mutable(index);
}
inline void pesan_client::set_rute(int index, const std::string& value) {
  _impl_.rute_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_client.rute)
}
inline void pesan_client::set_rute(int index, std::string&& value) {
  _impl_.rute_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Cloud.pesan_client.rute)
}
inline void pesan_client::set_rute(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rute_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cloud.pesan_client.rute)
}
inline void pesan_client::set_rute(int index, const char* value, size_t size) {
  _impl_.rute_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cloud.pesan_client.rute)
}
inline std::string* pesan_client::_internal_add_rute() {
  return _impl_.rute_.Add();
}
inline void pesan_client::add_rute(const std::string& value) {
  _impl_.rute_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cloud.pesan_client.rute)
}
inline void pesan_client::add_rute(std::string&& value) {
  _impl_.rute_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Cloud.pesan_client.rute)
}
inline void pesan_client::add_rute(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rute_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cloud.pesan_client.rute)
}
inline void pesan_client::add_rute(const char* value, size_t size) {
  _impl_.rute_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cloud.pesan_client.rute)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
pesan_client::rute() const {
  // @@protoc_insertion_point(field_list:Cloud.pesan_client.rute)
  return _impl_.rute_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
pesan_client::mutable_rute() {
  // @@protoc_insertion_point(field_mutable_list:Cloud.pesan_client.rute)
  return &_impl_.rute_;
}

// repeated int32 id_param_lama = 4;
inline int pesan_client::_internal_id_param_lama_size() const {
  return _impl_.id_param_lama_.size();
}
inline int pesan_client::id_param_lama_size() const {
  return _internal_id_param_lama_size();
}
inline void pesan_client::clear_id_param_lama() {
  _impl_.id_param_lama_.Clear();
}
inline int32_t pesan_client::_internal_id_param_lama(int index) const {
  return _impl_.id_param_lama_.Get(index);
}
inline int32_t pesan_client::id_param_lama(int index) const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_client.id_param_lama)
  return _internal_id_param_lama(index);
}
inline void pesan_client::set_id_param_lama(int index, int32_t value) {
  _impl_.id_param_lama_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_client.id_param_lama)
}
inline void pesan_client::_internal_add_id_param_lama(int32_t value) {
  _impl_.id_param_lama_.Add(value);
}
inline void pesan_client::add_id_param_lama(int32_t value) {
  _internal_add_id_param_lama(value);
  // @@protoc_insertion_point(field_add:Cloud.pesan_client.id_param_lama)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_client::_internal_id_param_lama() const {
  return _impl_.id_param_lama_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_client::id_param_lama() const {
  // @@protoc_insertion_point(field_list:Cloud.pesan_client.id_param_lama)
  return _internal_id_param_lama();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_client::_internal_mutable_id_param_lama() {
  return &_impl_.id_param_lama_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_client::mutable_id_param_lama() {
  // @@protoc_insertion_point(field_mutable_list:Cloud.pesan_client.id_param_lama)
  return _internal_mutable_id_param_lama();
}

// repeated int32 id_tipe_param = 5;
inline int pesan_client::_internal_id_tipe_param_size() const {
  return _impl_.id_tipe_param_.size();
}
inline int pesan_client::id_tipe_param_size() const {
  return _internal_id_tipe_param_size();
}
inline void pesan_client::clear_id_tipe_param() {
  _impl_.id_tipe_param_.Clear();
}
inline int32_t pesan_client::_internal_id_tipe_param(int index) const {
  return _impl_.id_tipe_param_.Get(index);
}
inline int32_t pesan_client::id_tipe_param(int index) const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_client.id_tipe_param)
  return _internal_id_tipe_param(index);
}
inline void pesan_client::set_id_tipe_param(int index, int32_t value) {
  _impl_.id_tipe_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_client.id_tipe_param)
}
inline void pesan_client::_internal_add_id_tipe_param(int32_t value) {
  _impl_.id_tipe_param_.Add(value);
}
inline void pesan_client::add_id_tipe_param(int32_t value) {
  _internal_add_id_tipe_param(value);
  // @@protoc_insertion_point(field_add:Cloud.pesan_client.id_tipe_param)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_client::_internal_id_tipe_param() const {
  return _impl_.id_tipe_param_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_client::id_tipe_param() const {
  // @@protoc_insertion_point(field_list:Cloud.pesan_client.id_tipe_param)
  return _internal_id_tipe_param();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_client::_internal_mutable_id_tipe_param() {
  return &_impl_.id_tipe_param_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_client::mutable_id_tipe_param() {
  // @@protoc_insertion_point(field_mutable_list:Cloud.pesan_client.id_tipe_param)
  return _internal_mutable_id_tipe_param();
}

// repeated int32 id_rute_lama = 6;
inline int pesan_client::_internal_id_rute_lama_size() const {
  return _impl_.id_rute_lama_.size();
}
inline int pesan_client::id_rute_lama_size() const {
  return _internal_id_rute_lama_size();
}
inline void pesan_client::clear_id_rute_lama() {
  _impl_.id_rute_lama_.Clear();
}
inline int32_t pesan_client::_internal_id_rute_lama(int index) const {
  return _impl_.id_rute_lama_.Get(index);
}
inline int32_t pesan_client::id_rute_lama(int index) const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_client.id_rute_lama)
  return _internal_id_rute_lama(index);
}
inline void pesan_client::set_id_rute_lama(int index, int32_t value) {
  _impl_.id_rute_lama_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_client.id_rute_lama)
}
inline void pesan_client::_internal_add_id_rute_lama(int32_t value) {
  _impl_.id_rute_lama_.Add(value);
}
inline void pesan_client::add_id_rute_lama(int32_t value) {
  _internal_add_id_rute_lama(value);
  // @@protoc_insertion_point(field_add:Cloud.pesan_client.id_rute_lama)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_client::_internal_id_rute_lama() const {
  return _impl_.id_rute_lama_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_client::id_rute_lama() const {
  // @@protoc_insertion_point(field_list:Cloud.pesan_client.id_rute_lama)
  return _internal_id_rute_lama();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_client::_internal_mutable_id_rute_lama() {
  return &_impl_.id_rute_lama_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_client::mutable_id_rute_lama() {
  // @@protoc_insertion_point(field_mutable_list:Cloud.pesan_client.id_rute_lama)
  return _internal_mutable_id_rute_lama();
}

// repeated int32 timestamp = 7;
inline int pesan_client::_internal_timestamp_size() const {
  return _impl_.timestamp_.size();
}
inline int pesan_client::timestamp_size() const {
  return _internal_timestamp_size();
}
inline void pesan_client::clear_timestamp() {
  _impl_.timestamp_.Clear();
}
inline int32_t pesan_client::_internal_timestamp(int index) const {
  return _impl_.timestamp_.Get(index);
}
inline int32_t pesan_client::timestamp(int index) const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_client.timestamp)
  return _internal_timestamp(index);
}
inline void pesan_client::set_timestamp(int index, int32_t value) {
  _impl_.timestamp_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_client.timestamp)
}
inline void pesan_client::_internal_add_timestamp(int32_t value) {
  _impl_.timestamp_.Add(value);
}
inline void pesan_client::add_timestamp(int32_t value) {
  _internal_add_timestamp(value);
  // @@protoc_insertion_point(field_add:Cloud.pesan_client.timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_client::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_client::timestamp() const {
  // @@protoc_insertion_point(field_list:Cloud.pesan_client.timestamp)
  return _internal_timestamp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_client::_internal_mutable_timestamp() {
  return &_impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_client::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:Cloud.pesan_client.timestamp)
  return _internal_mutable_timestamp();
}

// repeated int32 siklus = 8;
inline int pesan_client::_internal_siklus_size() const {
  return _impl_.siklus_.size();
}
inline int pesan_client::siklus_size() const {
  return _internal_siklus_size();
}
inline void pesan_client::clear_siklus() {
  _impl_.siklus_.Clear();
}
inline int32_t pesan_client::_internal_siklus(int index) const {
  return _impl_.siklus_.Get(index);
}
inline int32_t pesan_client::siklus(int index) const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_client.siklus)
  return _internal_siklus(index);
}
inline void pesan_client::set_siklus(int index, int32_t value) {
  _impl_.siklus_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_client.siklus)
}
inline void pesan_client::_internal_add_siklus(int32_t value) {
  _impl_.siklus_.Add(value);
}
inline void pesan_client::add_siklus(int32_t value) {
  _internal_add_siklus(value);
  // @@protoc_insertion_point(field_add:Cloud.pesan_client.siklus)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_client::_internal_siklus() const {
  return _impl_.siklus_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_client::siklus() const {
  // @@protoc_insertion_point(field_list:Cloud.pesan_client.siklus)
  return _internal_siklus();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_client::_internal_mutable_siklus() {
  return &_impl_.siklus_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_client::mutable_siklus() {
  // @@protoc_insertion_point(field_mutable_list:Cloud.pesan_client.siklus)
  return _internal_mutable_siklus();
}

// int32 jumlah_data = 9;
inline void pesan_client::clear_jumlah_data() {
  _impl_.jumlah_data_ = 0;
}
inline int32_t pesan_client::_internal_jumlah_data() const {
  return _impl_.jumlah_data_;
}
inline int32_t pesan_client::jumlah_data() const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_client.jumlah_data)
  return _internal_jumlah_data();
}
inline void pesan_client::_internal_set_jumlah_data(int32_t value) {
  
  _impl_.jumlah_data_ = value;
}
inline void pesan_client::set_jumlah_data(int32_t value) {
  _internal_set_jumlah_data(value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_client.jumlah_data)
}

// -------------------------------------------------------------------

// pesan_server

// string header_pesan = 1;
inline void pesan_server::clear_header_pesan() {
  _impl_.header_pesan_.ClearToEmpty();
}
inline const std::string& pesan_server::header_pesan() const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_server.header_pesan)
  return _internal_header_pesan();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pesan_server::set_header_pesan(ArgT0&& arg0, ArgT... args) {
 
 _impl_.header_pesan_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Cloud.pesan_server.header_pesan)
}
inline std::string* pesan_server::mutable_header_pesan() {
  std::string* _s = _internal_mutable_header_pesan();
  // @@protoc_insertion_point(field_mutable:Cloud.pesan_server.header_pesan)
  return _s;
}
inline const std::string& pesan_server::_internal_header_pesan() const {
  return _impl_.header_pesan_.Get();
}
inline void pesan_server::_internal_set_header_pesan(const std::string& value) {
  
  _impl_.header_pesan_.Set(value, GetArenaForAllocation());
}
inline std::string* pesan_server::_internal_mutable_header_pesan() {
  
  return _impl_.header_pesan_.Mutable(GetArenaForAllocation());
}
inline std::string* pesan_server::release_header_pesan() {
  // @@protoc_insertion_point(field_release:Cloud.pesan_server.header_pesan)
  return _impl_.header_pesan_.Release();
}
inline void pesan_server::set_allocated_header_pesan(std::string* header_pesan) {
  if (header_pesan != nullptr) {
    
  } else {
    
  }
  _impl_.header_pesan_.SetAllocated(header_pesan, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.header_pesan_.IsDefault()) {
    _impl_.header_pesan_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Cloud.pesan_server.header_pesan)
}

// repeated string aset = 2;
inline int pesan_server::_internal_aset_size() const {
  return _impl_.aset_.size();
}
inline int pesan_server::aset_size() const {
  return _internal_aset_size();
}
inline void pesan_server::clear_aset() {
  _impl_.aset_.Clear();
}
inline std::string* pesan_server::add_aset() {
  std::string* _s = _internal_add_aset();
  // @@protoc_insertion_point(field_add_mutable:Cloud.pesan_server.aset)
  return _s;
}
inline const std::string& pesan_server::_internal_aset(int index) const {
  return _impl_.aset_.Get(index);
}
inline const std::string& pesan_server::aset(int index) const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_server.aset)
  return _internal_aset(index);
}
inline std::string* pesan_server::mutable_aset(int index) {
  // @@protoc_insertion_point(field_mutable:Cloud.pesan_server.aset)
  return _impl_.aset_.Mutable(index);
}
inline void pesan_server::set_aset(int index, const std::string& value) {
  _impl_.aset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_server.aset)
}
inline void pesan_server::set_aset(int index, std::string&& value) {
  _impl_.aset_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Cloud.pesan_server.aset)
}
inline void pesan_server::set_aset(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.aset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cloud.pesan_server.aset)
}
inline void pesan_server::set_aset(int index, const char* value, size_t size) {
  _impl_.aset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cloud.pesan_server.aset)
}
inline std::string* pesan_server::_internal_add_aset() {
  return _impl_.aset_.Add();
}
inline void pesan_server::add_aset(const std::string& value) {
  _impl_.aset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cloud.pesan_server.aset)
}
inline void pesan_server::add_aset(std::string&& value) {
  _impl_.aset_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Cloud.pesan_server.aset)
}
inline void pesan_server::add_aset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.aset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cloud.pesan_server.aset)
}
inline void pesan_server::add_aset(const char* value, size_t size) {
  _impl_.aset_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cloud.pesan_server.aset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
pesan_server::aset() const {
  // @@protoc_insertion_point(field_list:Cloud.pesan_server.aset)
  return _impl_.aset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
pesan_server::mutable_aset() {
  // @@protoc_insertion_point(field_mutable_list:Cloud.pesan_server.aset)
  return &_impl_.aset_;
}

// repeated string rute = 3;
inline int pesan_server::_internal_rute_size() const {
  return _impl_.rute_.size();
}
inline int pesan_server::rute_size() const {
  return _internal_rute_size();
}
inline void pesan_server::clear_rute() {
  _impl_.rute_.Clear();
}
inline std::string* pesan_server::add_rute() {
  std::string* _s = _internal_add_rute();
  // @@protoc_insertion_point(field_add_mutable:Cloud.pesan_server.rute)
  return _s;
}
inline const std::string& pesan_server::_internal_rute(int index) const {
  return _impl_.rute_.Get(index);
}
inline const std::string& pesan_server::rute(int index) const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_server.rute)
  return _internal_rute(index);
}
inline std::string* pesan_server::mutable_rute(int index) {
  // @@protoc_insertion_point(field_mutable:Cloud.pesan_server.rute)
  return _impl_.rute_.Mutable(index);
}
inline void pesan_server::set_rute(int index, const std::string& value) {
  _impl_.rute_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_server.rute)
}
inline void pesan_server::set_rute(int index, std::string&& value) {
  _impl_.rute_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Cloud.pesan_server.rute)
}
inline void pesan_server::set_rute(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rute_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cloud.pesan_server.rute)
}
inline void pesan_server::set_rute(int index, const char* value, size_t size) {
  _impl_.rute_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cloud.pesan_server.rute)
}
inline std::string* pesan_server::_internal_add_rute() {
  return _impl_.rute_.Add();
}
inline void pesan_server::add_rute(const std::string& value) {
  _impl_.rute_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cloud.pesan_server.rute)
}
inline void pesan_server::add_rute(std::string&& value) {
  _impl_.rute_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Cloud.pesan_server.rute)
}
inline void pesan_server::add_rute(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rute_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cloud.pesan_server.rute)
}
inline void pesan_server::add_rute(const char* value, size_t size) {
  _impl_.rute_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cloud.pesan_server.rute)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
pesan_server::rute() const {
  // @@protoc_insertion_point(field_list:Cloud.pesan_server.rute)
  return _impl_.rute_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
pesan_server::mutable_rute() {
  // @@protoc_insertion_point(field_mutable_list:Cloud.pesan_server.rute)
  return &_impl_.rute_;
}

// repeated int32 id_param_lama = 4;
inline int pesan_server::_internal_id_param_lama_size() const {
  return _impl_.id_param_lama_.size();
}
inline int pesan_server::id_param_lama_size() const {
  return _internal_id_param_lama_size();
}
inline void pesan_server::clear_id_param_lama() {
  _impl_.id_param_lama_.Clear();
}
inline int32_t pesan_server::_internal_id_param_lama(int index) const {
  return _impl_.id_param_lama_.Get(index);
}
inline int32_t pesan_server::id_param_lama(int index) const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_server.id_param_lama)
  return _internal_id_param_lama(index);
}
inline void pesan_server::set_id_param_lama(int index, int32_t value) {
  _impl_.id_param_lama_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_server.id_param_lama)
}
inline void pesan_server::_internal_add_id_param_lama(int32_t value) {
  _impl_.id_param_lama_.Add(value);
}
inline void pesan_server::add_id_param_lama(int32_t value) {
  _internal_add_id_param_lama(value);
  // @@protoc_insertion_point(field_add:Cloud.pesan_server.id_param_lama)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_server::_internal_id_param_lama() const {
  return _impl_.id_param_lama_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_server::id_param_lama() const {
  // @@protoc_insertion_point(field_list:Cloud.pesan_server.id_param_lama)
  return _internal_id_param_lama();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_server::_internal_mutable_id_param_lama() {
  return &_impl_.id_param_lama_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_server::mutable_id_param_lama() {
  // @@protoc_insertion_point(field_mutable_list:Cloud.pesan_server.id_param_lama)
  return _internal_mutable_id_param_lama();
}

// repeated int32 id_tipe_param = 5;
inline int pesan_server::_internal_id_tipe_param_size() const {
  return _impl_.id_tipe_param_.size();
}
inline int pesan_server::id_tipe_param_size() const {
  return _internal_id_tipe_param_size();
}
inline void pesan_server::clear_id_tipe_param() {
  _impl_.id_tipe_param_.Clear();
}
inline int32_t pesan_server::_internal_id_tipe_param(int index) const {
  return _impl_.id_tipe_param_.Get(index);
}
inline int32_t pesan_server::id_tipe_param(int index) const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_server.id_tipe_param)
  return _internal_id_tipe_param(index);
}
inline void pesan_server::set_id_tipe_param(int index, int32_t value) {
  _impl_.id_tipe_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_server.id_tipe_param)
}
inline void pesan_server::_internal_add_id_tipe_param(int32_t value) {
  _impl_.id_tipe_param_.Add(value);
}
inline void pesan_server::add_id_tipe_param(int32_t value) {
  _internal_add_id_tipe_param(value);
  // @@protoc_insertion_point(field_add:Cloud.pesan_server.id_tipe_param)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_server::_internal_id_tipe_param() const {
  return _impl_.id_tipe_param_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_server::id_tipe_param() const {
  // @@protoc_insertion_point(field_list:Cloud.pesan_server.id_tipe_param)
  return _internal_id_tipe_param();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_server::_internal_mutable_id_tipe_param() {
  return &_impl_.id_tipe_param_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_server::mutable_id_tipe_param() {
  // @@protoc_insertion_point(field_mutable_list:Cloud.pesan_server.id_tipe_param)
  return _internal_mutable_id_tipe_param();
}

// repeated int32 id_rute_lama = 6;
inline int pesan_server::_internal_id_rute_lama_size() const {
  return _impl_.id_rute_lama_.size();
}
inline int pesan_server::id_rute_lama_size() const {
  return _internal_id_rute_lama_size();
}
inline void pesan_server::clear_id_rute_lama() {
  _impl_.id_rute_lama_.Clear();
}
inline int32_t pesan_server::_internal_id_rute_lama(int index) const {
  return _impl_.id_rute_lama_.Get(index);
}
inline int32_t pesan_server::id_rute_lama(int index) const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_server.id_rute_lama)
  return _internal_id_rute_lama(index);
}
inline void pesan_server::set_id_rute_lama(int index, int32_t value) {
  _impl_.id_rute_lama_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_server.id_rute_lama)
}
inline void pesan_server::_internal_add_id_rute_lama(int32_t value) {
  _impl_.id_rute_lama_.Add(value);
}
inline void pesan_server::add_id_rute_lama(int32_t value) {
  _internal_add_id_rute_lama(value);
  // @@protoc_insertion_point(field_add:Cloud.pesan_server.id_rute_lama)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_server::_internal_id_rute_lama() const {
  return _impl_.id_rute_lama_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_server::id_rute_lama() const {
  // @@protoc_insertion_point(field_list:Cloud.pesan_server.id_rute_lama)
  return _internal_id_rute_lama();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_server::_internal_mutable_id_rute_lama() {
  return &_impl_.id_rute_lama_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_server::mutable_id_rute_lama() {
  // @@protoc_insertion_point(field_mutable_list:Cloud.pesan_server.id_rute_lama)
  return _internal_mutable_id_rute_lama();
}

// repeated int32 timestamp = 7;
inline int pesan_server::_internal_timestamp_size() const {
  return _impl_.timestamp_.size();
}
inline int pesan_server::timestamp_size() const {
  return _internal_timestamp_size();
}
inline void pesan_server::clear_timestamp() {
  _impl_.timestamp_.Clear();
}
inline int32_t pesan_server::_internal_timestamp(int index) const {
  return _impl_.timestamp_.Get(index);
}
inline int32_t pesan_server::timestamp(int index) const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_server.timestamp)
  return _internal_timestamp(index);
}
inline void pesan_server::set_timestamp(int index, int32_t value) {
  _impl_.timestamp_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_server.timestamp)
}
inline void pesan_server::_internal_add_timestamp(int32_t value) {
  _impl_.timestamp_.Add(value);
}
inline void pesan_server::add_timestamp(int32_t value) {
  _internal_add_timestamp(value);
  // @@protoc_insertion_point(field_add:Cloud.pesan_server.timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_server::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_server::timestamp() const {
  // @@protoc_insertion_point(field_list:Cloud.pesan_server.timestamp)
  return _internal_timestamp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_server::_internal_mutable_timestamp() {
  return &_impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_server::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:Cloud.pesan_server.timestamp)
  return _internal_mutable_timestamp();
}

// repeated int32 siklus = 8;
inline int pesan_server::_internal_siklus_size() const {
  return _impl_.siklus_.size();
}
inline int pesan_server::siklus_size() const {
  return _internal_siklus_size();
}
inline void pesan_server::clear_siklus() {
  _impl_.siklus_.Clear();
}
inline int32_t pesan_server::_internal_siklus(int index) const {
  return _impl_.siklus_.Get(index);
}
inline int32_t pesan_server::siklus(int index) const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_server.siklus)
  return _internal_siklus(index);
}
inline void pesan_server::set_siklus(int index, int32_t value) {
  _impl_.siklus_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_server.siklus)
}
inline void pesan_server::_internal_add_siklus(int32_t value) {
  _impl_.siklus_.Add(value);
}
inline void pesan_server::add_siklus(int32_t value) {
  _internal_add_siklus(value);
  // @@protoc_insertion_point(field_add:Cloud.pesan_server.siklus)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_server::_internal_siklus() const {
  return _impl_.siklus_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
pesan_server::siklus() const {
  // @@protoc_insertion_point(field_list:Cloud.pesan_server.siklus)
  return _internal_siklus();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_server::_internal_mutable_siklus() {
  return &_impl_.siklus_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
pesan_server::mutable_siklus() {
  // @@protoc_insertion_point(field_mutable_list:Cloud.pesan_server.siklus)
  return _internal_mutable_siklus();
}

// int32 jumlah_data = 9;
inline void pesan_server::clear_jumlah_data() {
  _impl_.jumlah_data_ = 0;
}
inline int32_t pesan_server::_internal_jumlah_data() const {
  return _impl_.jumlah_data_;
}
inline int32_t pesan_server::jumlah_data() const {
  // @@protoc_insertion_point(field_get:Cloud.pesan_server.jumlah_data)
  return _internal_jumlah_data();
}
inline void pesan_server::_internal_set_jumlah_data(int32_t value) {
  
  _impl_.jumlah_data_ = value;
}
inline void pesan_server::set_jumlah_data(int32_t value) {
  _internal_set_jumlah_data(value);
  // @@protoc_insertion_point(field_set:Cloud.pesan_server.jumlah_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cloud

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Cloud_2eproto
