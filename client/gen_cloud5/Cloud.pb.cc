// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cloud.proto

#include "Cloud.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Cloud {
constexpr pesan_client_info_data::pesan_client_info_data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aset_()
  , rute_()
  , id_param_lama_()
  , _id_param_lama_cached_byte_size_(0)
  , id_tipe_param_()
  , _id_tipe_param_cached_byte_size_(0)
  , id_rute_lama_()
  , _id_rute_lama_cached_byte_size_(0)
  , timestamp_()
  , _timestamp_cached_byte_size_(0)
  , siklus_()
  , _siklus_cached_byte_size_(0)
  , id_data_masuk_()
  , _id_data_masuk_cached_byte_size_(0)
  , id_date_lama_()
  , _id_date_lama_cached_byte_size_(0){}
struct pesan_client_info_dataDefaultTypeInternal {
  constexpr pesan_client_info_dataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pesan_client_info_dataDefaultTypeInternal() {}
  union {
    pesan_client_info_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pesan_client_info_dataDefaultTypeInternal _pesan_client_info_data_default_instance_;
constexpr pesan_client::pesan_client(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_pesan_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , jumlah_data_(0)
  , id_database_(0){}
struct pesan_clientDefaultTypeInternal {
  constexpr pesan_clientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pesan_clientDefaultTypeInternal() {}
  union {
    pesan_client _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pesan_clientDefaultTypeInternal _pesan_client_default_instance_;
constexpr pesan_server_info_data::pesan_server_info_data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aset_()
  , rute_()
  , id_param_lama_()
  , _id_param_lama_cached_byte_size_(0)
  , id_tipe_param_()
  , _id_tipe_param_cached_byte_size_(0)
  , id_rute_lama_()
  , _id_rute_lama_cached_byte_size_(0)
  , timestamp_()
  , _timestamp_cached_byte_size_(0)
  , siklus_()
  , _siklus_cached_byte_size_(0)
  , id_data_masuk_()
  , _id_data_masuk_cached_byte_size_(0)
  , id_date_lama_()
  , _id_date_lama_cached_byte_size_(0){}
struct pesan_server_info_dataDefaultTypeInternal {
  constexpr pesan_server_info_dataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pesan_server_info_dataDefaultTypeInternal() {}
  union {
    pesan_server_info_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pesan_server_info_dataDefaultTypeInternal _pesan_server_info_data_default_instance_;
constexpr pesan_server::pesan_server(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_pesan_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , jumlah_data_(0)
  , id_database_(0){}
struct pesan_serverDefaultTypeInternal {
  constexpr pesan_serverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pesan_serverDefaultTypeInternal() {}
  union {
    pesan_server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pesan_serverDefaultTypeInternal _pesan_server_default_instance_;
constexpr mes_client_isi_data::mes_client_isi_data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aset_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , param_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(0)
  , siklus_(0)
  , flag_set_param_(0){}
struct mes_client_isi_dataDefaultTypeInternal {
  constexpr mes_client_isi_dataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mes_client_isi_dataDefaultTypeInternal() {}
  union {
    mes_client_isi_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mes_client_isi_dataDefaultTypeInternal _mes_client_isi_data_default_instance_;
constexpr mes_client_info_data::mes_client_info_data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_date_lama_(0)
  , id_data_masuk_(0)
  , id_param_lama_(0)
  , id_tipe_param_(0)
  , id_rute_lama_(0){}
struct mes_client_info_dataDefaultTypeInternal {
  constexpr mes_client_info_dataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mes_client_info_dataDefaultTypeInternal() {}
  union {
    mes_client_info_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mes_client_info_dataDefaultTypeInternal _mes_client_info_data_default_instance_;
constexpr mes_client::mes_client(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_pesan_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , jumlah_data_(0)
  , pesan_ke_(0)
  , flag_info_data_(0)
  , id_database_(0){}
struct mes_clientDefaultTypeInternal {
  constexpr mes_clientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mes_clientDefaultTypeInternal() {}
  union {
    mes_client _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mes_clientDefaultTypeInternal _mes_client_default_instance_;
constexpr mes_server_isi_data::mes_server_isi_data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aset_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , param_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(0)
  , siklus_(0)
  , flag_set_param_(0){}
struct mes_server_isi_dataDefaultTypeInternal {
  constexpr mes_server_isi_dataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mes_server_isi_dataDefaultTypeInternal() {}
  union {
    mes_server_isi_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mes_server_isi_dataDefaultTypeInternal _mes_server_isi_data_default_instance_;
constexpr mes_server_info_data::mes_server_info_data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_date_lama_(0)
  , id_data_masuk_(0)
  , id_param_lama_(0)
  , id_tipe_param_(0)
  , id_rute_lama_(0){}
struct mes_server_info_dataDefaultTypeInternal {
  constexpr mes_server_info_dataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mes_server_info_dataDefaultTypeInternal() {}
  union {
    mes_server_info_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mes_server_info_dataDefaultTypeInternal _mes_server_info_data_default_instance_;
constexpr mes_server::mes_server(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_pesan_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , jumlah_data_(0)
  , pesan_ke_(0)
  , flag_info_data_(0)
  , id_database_(0){}
struct mes_serverDefaultTypeInternal {
  constexpr mes_serverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mes_serverDefaultTypeInternal() {}
  union {
    mes_server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mes_serverDefaultTypeInternal _mes_server_default_instance_;
}  // namespace Cloud
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Cloud_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Cloud_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Cloud_2eproto = nullptr;

const uint32_t TableStruct_Cloud_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client_info_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client_info_data, aset_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client_info_data, rute_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client_info_data, id_param_lama_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client_info_data, id_tipe_param_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client_info_data, id_rute_lama_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client_info_data, timestamp_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client_info_data, siklus_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client_info_data, id_data_masuk_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client_info_data, id_date_lama_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client, header_pesan_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client, jumlah_data_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client, id_database_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server_info_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server_info_data, aset_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server_info_data, rute_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server_info_data, id_param_lama_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server_info_data, id_tipe_param_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server_info_data, id_rute_lama_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server_info_data, timestamp_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server_info_data, siklus_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server_info_data, id_data_masuk_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server_info_data, id_date_lama_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server, header_pesan_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server, jumlah_data_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server, id_database_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client_isi_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client_isi_data, aset_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client_isi_data, rute_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client_isi_data, timestamp_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client_isi_data, siklus_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client_isi_data, data_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client_isi_data, param_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client_isi_data, flag_set_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client_info_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client_info_data, id_date_lama_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client_info_data, id_data_masuk_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client_info_data, id_param_lama_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client_info_data, id_tipe_param_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client_info_data, id_rute_lama_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client, header_pesan_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client, jumlah_data_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client, pesan_ke_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client, flag_info_data_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_client, id_database_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server_isi_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server_isi_data, aset_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server_isi_data, rute_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server_isi_data, timestamp_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server_isi_data, siklus_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server_isi_data, data_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server_isi_data, param_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server_isi_data, flag_set_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server_info_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server_info_data, id_date_lama_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server_info_data, id_data_masuk_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server_info_data, id_param_lama_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server_info_data, id_tipe_param_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server_info_data, id_rute_lama_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server, header_pesan_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server, jumlah_data_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server, pesan_ke_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server, flag_info_data_),
  PROTOBUF_FIELD_OFFSET(::Cloud::mes_server, id_database_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Cloud::pesan_client_info_data)},
  { 15, -1, -1, sizeof(::Cloud::pesan_client)},
  { 24, -1, -1, sizeof(::Cloud::pesan_server_info_data)},
  { 39, -1, -1, sizeof(::Cloud::pesan_server)},
  { 48, -1, -1, sizeof(::Cloud::mes_client_isi_data)},
  { 61, -1, -1, sizeof(::Cloud::mes_client_info_data)},
  { 72, -1, -1, sizeof(::Cloud::mes_client)},
  { 83, -1, -1, sizeof(::Cloud::mes_server_isi_data)},
  { 96, -1, -1, sizeof(::Cloud::mes_server_info_data)},
  { 107, -1, -1, sizeof(::Cloud::mes_server)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Cloud::_pesan_client_info_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Cloud::_pesan_client_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Cloud::_pesan_server_info_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Cloud::_pesan_server_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Cloud::_mes_client_isi_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Cloud::_mes_client_info_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Cloud::_mes_client_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Cloud::_mes_server_isi_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Cloud::_mes_server_info_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Cloud::_mes_server_default_instance_),
};

const char descriptor_table_protodef_Cloud_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Cloud.proto\022\005Cloud\"\214\002\n\014pesan_client\022\024\n"
  "\014header_pesan\030\001 \001(\t\022\023\n\013jumlah_data\030\002 \001(\005"
  "\022\023\n\013id_database\030\003 \001(\005\032\273\001\n\tinfo_data\022\014\n\004a"
  "set\030\001 \003(\t\022\014\n\004rute\030\002 \003(\t\022\025\n\rid_param_lama"
  "\030\003 \003(\005\022\025\n\rid_tipe_param\030\004 \003(\005\022\024\n\014id_rute"
  "_lama\030\005 \003(\005\022\021\n\ttimestamp\030\006 \003(\005\022\016\n\006siklus"
  "\030\007 \003(\005\022\025\n\rid_data_masuk\030\010 \003(\005\022\024\n\014id_date"
  "_lama\030\t \003(\005\"\214\002\n\014pesan_server\022\024\n\014header_p"
  "esan\030\001 \001(\t\022\023\n\013jumlah_data\030\002 \001(\005\022\023\n\013id_da"
  "tabase\030\003 \001(\005\032\273\001\n\tinfo_data\022\014\n\004aset\030\001 \003(\t"
  "\022\014\n\004rute\030\002 \003(\t\022\025\n\rid_param_lama\030\003 \003(\005\022\025\n"
  "\rid_tipe_param\030\004 \003(\005\022\024\n\014id_rute_lama\030\005 \003"
  "(\005\022\021\n\ttimestamp\030\006 \003(\005\022\016\n\006siklus\030\007 \003(\005\022\025\n"
  "\rid_data_masuk\030\010 \003(\005\022\024\n\014id_date_lama\030\t \003"
  "(\005\"\364\002\n\nmes_client\022\024\n\014header_pesan\030\001 \001(\t\022"
  "\023\n\013jumlah_data\030\002 \001(\005\022\020\n\010pesan_ke\030\003 \001(\005\022\026"
  "\n\016flag_info_data\030\004 \001(\005\022\023\n\013id_database\030\005 "
  "\001(\005\032~\n\010isi_data\022\014\n\004aset\030\001 \001(\t\022\014\n\004rute\030\002 "
  "\001(\t\022\021\n\ttimestamp\030\003 \001(\005\022\016\n\006siklus\030\004 \001(\005\022\014"
  "\n\004data\030\005 \001(\014\022\r\n\005param\030\006 \001(\014\022\026\n\016flag_set_"
  "param\030\007 \001(\005\032|\n\tinfo_data\022\024\n\014id_date_lama"
  "\030\001 \001(\005\022\025\n\rid_data_masuk\030\002 \001(\005\022\025\n\rid_para"
  "m_lama\030\003 \001(\005\022\025\n\rid_tipe_param\030\004 \001(\005\022\024\n\014i"
  "d_rute_lama\030\005 \001(\005\"\364\002\n\nmes_server\022\024\n\014head"
  "er_pesan\030\001 \001(\t\022\023\n\013jumlah_data\030\002 \001(\005\022\020\n\010p"
  "esan_ke\030\003 \001(\005\022\026\n\016flag_info_data\030\004 \001(\005\022\023\n"
  "\013id_database\030\005 \001(\005\032~\n\010isi_data\022\014\n\004aset\030\001"
  " \001(\t\022\014\n\004rute\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\005\022\016\n"
  "\006siklus\030\004 \001(\005\022\014\n\004data\030\005 \001(\014\022\r\n\005param\030\006 \001"
  "(\014\022\026\n\016flag_set_param\030\007 \001(\005\032|\n\tinfo_data\022"
  "\024\n\014id_date_lama\030\001 \001(\005\022\025\n\rid_data_masuk\030\002"
  " \001(\005\022\025\n\rid_param_lama\030\003 \001(\005\022\025\n\rid_tipe_p"
  "aram\030\004 \001(\005\022\024\n\014id_rute_lama\030\005 \001(\0052H\n\nprot"
  "okol_1\022:\n\014initial_data\022\023.Cloud.pesan_cli"
  "ent\032\023.Cloud.pesan_server\"\0002B\n\nprotokol_2"
  "\0224\n\nkirim_data\022\021.Cloud.mes_client\032\021.Clou"
  "d.mes_server\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Cloud_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Cloud_2eproto = {
  false, false, 1462, descriptor_table_protodef_Cloud_2eproto, "Cloud.proto", 
  &descriptor_table_Cloud_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_Cloud_2eproto::offsets,
  file_level_metadata_Cloud_2eproto, file_level_enum_descriptors_Cloud_2eproto, file_level_service_descriptors_Cloud_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Cloud_2eproto_getter() {
  return &descriptor_table_Cloud_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Cloud_2eproto(&descriptor_table_Cloud_2eproto);
namespace Cloud {

// ===================================================================

class pesan_client_info_data::_Internal {
 public:
};

pesan_client_info_data::pesan_client_info_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  aset_(arena),
  rute_(arena),
  id_param_lama_(arena),
  id_tipe_param_(arena),
  id_rute_lama_(arena),
  timestamp_(arena),
  siklus_(arena),
  id_data_masuk_(arena),
  id_date_lama_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Cloud.pesan_client.info_data)
}
pesan_client_info_data::pesan_client_info_data(const pesan_client_info_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      aset_(from.aset_),
      rute_(from.rute_),
      id_param_lama_(from.id_param_lama_),
      id_tipe_param_(from.id_tipe_param_),
      id_rute_lama_(from.id_rute_lama_),
      timestamp_(from.timestamp_),
      siklus_(from.siklus_),
      id_data_masuk_(from.id_data_masuk_),
      id_date_lama_(from.id_date_lama_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Cloud.pesan_client.info_data)
}

inline void pesan_client_info_data::SharedCtor() {
}

pesan_client_info_data::~pesan_client_info_data() {
  // @@protoc_insertion_point(destructor:Cloud.pesan_client.info_data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void pesan_client_info_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void pesan_client_info_data::ArenaDtor(void* object) {
  pesan_client_info_data* _this = reinterpret_cast< pesan_client_info_data* >(object);
  (void)_this;
}
void pesan_client_info_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pesan_client_info_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pesan_client_info_data::Clear() {
// @@protoc_insertion_point(message_clear_start:Cloud.pesan_client.info_data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aset_.Clear();
  rute_.Clear();
  id_param_lama_.Clear();
  id_tipe_param_.Clear();
  id_rute_lama_.Clear();
  timestamp_.Clear();
  siklus_.Clear();
  id_data_masuk_.Clear();
  id_date_lama_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pesan_client_info_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string aset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aset();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Cloud.pesan_client.info_data.aset"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string rute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rute();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Cloud.pesan_client.info_data.rute"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_param_lama = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_param_lama(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_id_param_lama(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_tipe_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_tipe_param(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_id_tipe_param(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_rute_lama = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_rute_lama(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_id_rute_lama(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 siklus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_siklus(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_siklus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_data_masuk = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_data_masuk(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_id_data_masuk(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_date_lama = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_date_lama(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_id_date_lama(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* pesan_client_info_data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cloud.pesan_client.info_data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string aset = 1;
  for (int i = 0, n = this->_internal_aset_size(); i < n; i++) {
    const auto& s = this->_internal_aset(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.pesan_client.info_data.aset");
    target = stream->WriteString(1, s, target);
  }

  // repeated string rute = 2;
  for (int i = 0, n = this->_internal_rute_size(); i < n; i++) {
    const auto& s = this->_internal_rute(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.pesan_client.info_data.rute");
    target = stream->WriteString(2, s, target);
  }

  // repeated int32 id_param_lama = 3;
  {
    int byte_size = _id_param_lama_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_id_param_lama(), byte_size, target);
    }
  }

  // repeated int32 id_tipe_param = 4;
  {
    int byte_size = _id_tipe_param_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_id_tipe_param(), byte_size, target);
    }
  }

  // repeated int32 id_rute_lama = 5;
  {
    int byte_size = _id_rute_lama_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_id_rute_lama(), byte_size, target);
    }
  }

  // repeated int32 timestamp = 6;
  {
    int byte_size = _timestamp_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_timestamp(), byte_size, target);
    }
  }

  // repeated int32 siklus = 7;
  {
    int byte_size = _siklus_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_siklus(), byte_size, target);
    }
  }

  // repeated int32 id_data_masuk = 8;
  {
    int byte_size = _id_data_masuk_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_id_data_masuk(), byte_size, target);
    }
  }

  // repeated int32 id_date_lama = 9;
  {
    int byte_size = _id_date_lama_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_id_date_lama(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cloud.pesan_client.info_data)
  return target;
}

size_t pesan_client_info_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cloud.pesan_client.info_data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aset = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(aset_.size());
  for (int i = 0, n = aset_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      aset_.Get(i));
  }

  // repeated string rute = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rute_.size());
  for (int i = 0, n = rute_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      rute_.Get(i));
  }

  // repeated int32 id_param_lama = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->id_param_lama_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_param_lama_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 id_tipe_param = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->id_tipe_param_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_tipe_param_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 id_rute_lama = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->id_rute_lama_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_rute_lama_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 timestamp = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->timestamp_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _timestamp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 siklus = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->siklus_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _siklus_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 id_data_masuk = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->id_data_masuk_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_data_masuk_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 id_date_lama = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->id_date_lama_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_date_lama_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pesan_client_info_data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    pesan_client_info_data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pesan_client_info_data::GetClassData() const { return &_class_data_; }

void pesan_client_info_data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<pesan_client_info_data *>(to)->MergeFrom(
      static_cast<const pesan_client_info_data &>(from));
}


void pesan_client_info_data::MergeFrom(const pesan_client_info_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cloud.pesan_client.info_data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  aset_.MergeFrom(from.aset_);
  rute_.MergeFrom(from.rute_);
  id_param_lama_.MergeFrom(from.id_param_lama_);
  id_tipe_param_.MergeFrom(from.id_tipe_param_);
  id_rute_lama_.MergeFrom(from.id_rute_lama_);
  timestamp_.MergeFrom(from.timestamp_);
  siklus_.MergeFrom(from.siklus_);
  id_data_masuk_.MergeFrom(from.id_data_masuk_);
  id_date_lama_.MergeFrom(from.id_date_lama_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pesan_client_info_data::CopyFrom(const pesan_client_info_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cloud.pesan_client.info_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pesan_client_info_data::IsInitialized() const {
  return true;
}

void pesan_client_info_data::InternalSwap(pesan_client_info_data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  aset_.InternalSwap(&other->aset_);
  rute_.InternalSwap(&other->rute_);
  id_param_lama_.InternalSwap(&other->id_param_lama_);
  id_tipe_param_.InternalSwap(&other->id_tipe_param_);
  id_rute_lama_.InternalSwap(&other->id_rute_lama_);
  timestamp_.InternalSwap(&other->timestamp_);
  siklus_.InternalSwap(&other->siklus_);
  id_data_masuk_.InternalSwap(&other->id_data_masuk_);
  id_date_lama_.InternalSwap(&other->id_date_lama_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pesan_client_info_data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cloud_2eproto_getter, &descriptor_table_Cloud_2eproto_once,
      file_level_metadata_Cloud_2eproto[0]);
}

// ===================================================================

class pesan_client::_Internal {
 public:
};

pesan_client::pesan_client(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Cloud.pesan_client)
}
pesan_client::pesan_client(const pesan_client& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_pesan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    header_pesan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header_pesan().empty()) {
    header_pesan_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header_pesan(), 
      GetArenaForAllocation());
  }
  ::memcpy(&jumlah_data_, &from.jumlah_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_database_) -
    reinterpret_cast<char*>(&jumlah_data_)) + sizeof(id_database_));
  // @@protoc_insertion_point(copy_constructor:Cloud.pesan_client)
}

inline void pesan_client::SharedCtor() {
header_pesan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  header_pesan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&jumlah_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_database_) -
    reinterpret_cast<char*>(&jumlah_data_)) + sizeof(id_database_));
}

pesan_client::~pesan_client() {
  // @@protoc_insertion_point(destructor:Cloud.pesan_client)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void pesan_client::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  header_pesan_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void pesan_client::ArenaDtor(void* object) {
  pesan_client* _this = reinterpret_cast< pesan_client* >(object);
  (void)_this;
}
void pesan_client::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pesan_client::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pesan_client::Clear() {
// @@protoc_insertion_point(message_clear_start:Cloud.pesan_client)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_pesan_.ClearToEmpty();
  ::memset(&jumlah_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_database_) -
      reinterpret_cast<char*>(&jumlah_data_)) + sizeof(id_database_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pesan_client::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string header_pesan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header_pesan();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Cloud.pesan_client.header_pesan"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 jumlah_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          jumlah_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id_database = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          id_database_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* pesan_client::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cloud.pesan_client)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string header_pesan = 1;
  if (!this->_internal_header_pesan().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header_pesan().data(), static_cast<int>(this->_internal_header_pesan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.pesan_client.header_pesan");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header_pesan(), target);
  }

  // int32 jumlah_data = 2;
  if (this->_internal_jumlah_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_jumlah_data(), target);
  }

  // int32 id_database = 3;
  if (this->_internal_id_database() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id_database(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cloud.pesan_client)
  return target;
}

size_t pesan_client::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cloud.pesan_client)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string header_pesan = 1;
  if (!this->_internal_header_pesan().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header_pesan());
  }

  // int32 jumlah_data = 2;
  if (this->_internal_jumlah_data() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_jumlah_data());
  }

  // int32 id_database = 3;
  if (this->_internal_id_database() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_database());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pesan_client::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    pesan_client::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pesan_client::GetClassData() const { return &_class_data_; }

void pesan_client::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<pesan_client *>(to)->MergeFrom(
      static_cast<const pesan_client &>(from));
}


void pesan_client::MergeFrom(const pesan_client& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cloud.pesan_client)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_header_pesan().empty()) {
    _internal_set_header_pesan(from._internal_header_pesan());
  }
  if (from._internal_jumlah_data() != 0) {
    _internal_set_jumlah_data(from._internal_jumlah_data());
  }
  if (from._internal_id_database() != 0) {
    _internal_set_id_database(from._internal_id_database());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pesan_client::CopyFrom(const pesan_client& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cloud.pesan_client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pesan_client::IsInitialized() const {
  return true;
}

void pesan_client::InternalSwap(pesan_client* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &header_pesan_, lhs_arena,
      &other->header_pesan_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pesan_client, id_database_)
      + sizeof(pesan_client::id_database_)
      - PROTOBUF_FIELD_OFFSET(pesan_client, jumlah_data_)>(
          reinterpret_cast<char*>(&jumlah_data_),
          reinterpret_cast<char*>(&other->jumlah_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pesan_client::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cloud_2eproto_getter, &descriptor_table_Cloud_2eproto_once,
      file_level_metadata_Cloud_2eproto[1]);
}

// ===================================================================

class pesan_server_info_data::_Internal {
 public:
};

pesan_server_info_data::pesan_server_info_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  aset_(arena),
  rute_(arena),
  id_param_lama_(arena),
  id_tipe_param_(arena),
  id_rute_lama_(arena),
  timestamp_(arena),
  siklus_(arena),
  id_data_masuk_(arena),
  id_date_lama_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Cloud.pesan_server.info_data)
}
pesan_server_info_data::pesan_server_info_data(const pesan_server_info_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      aset_(from.aset_),
      rute_(from.rute_),
      id_param_lama_(from.id_param_lama_),
      id_tipe_param_(from.id_tipe_param_),
      id_rute_lama_(from.id_rute_lama_),
      timestamp_(from.timestamp_),
      siklus_(from.siklus_),
      id_data_masuk_(from.id_data_masuk_),
      id_date_lama_(from.id_date_lama_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Cloud.pesan_server.info_data)
}

inline void pesan_server_info_data::SharedCtor() {
}

pesan_server_info_data::~pesan_server_info_data() {
  // @@protoc_insertion_point(destructor:Cloud.pesan_server.info_data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void pesan_server_info_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void pesan_server_info_data::ArenaDtor(void* object) {
  pesan_server_info_data* _this = reinterpret_cast< pesan_server_info_data* >(object);
  (void)_this;
}
void pesan_server_info_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pesan_server_info_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pesan_server_info_data::Clear() {
// @@protoc_insertion_point(message_clear_start:Cloud.pesan_server.info_data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aset_.Clear();
  rute_.Clear();
  id_param_lama_.Clear();
  id_tipe_param_.Clear();
  id_rute_lama_.Clear();
  timestamp_.Clear();
  siklus_.Clear();
  id_data_masuk_.Clear();
  id_date_lama_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pesan_server_info_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string aset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aset();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Cloud.pesan_server.info_data.aset"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string rute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rute();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Cloud.pesan_server.info_data.rute"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_param_lama = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_param_lama(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_id_param_lama(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_tipe_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_tipe_param(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_id_tipe_param(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_rute_lama = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_rute_lama(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_id_rute_lama(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 siklus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_siklus(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_siklus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_data_masuk = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_data_masuk(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_id_data_masuk(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_date_lama = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_date_lama(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_id_date_lama(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* pesan_server_info_data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cloud.pesan_server.info_data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string aset = 1;
  for (int i = 0, n = this->_internal_aset_size(); i < n; i++) {
    const auto& s = this->_internal_aset(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.pesan_server.info_data.aset");
    target = stream->WriteString(1, s, target);
  }

  // repeated string rute = 2;
  for (int i = 0, n = this->_internal_rute_size(); i < n; i++) {
    const auto& s = this->_internal_rute(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.pesan_server.info_data.rute");
    target = stream->WriteString(2, s, target);
  }

  // repeated int32 id_param_lama = 3;
  {
    int byte_size = _id_param_lama_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_id_param_lama(), byte_size, target);
    }
  }

  // repeated int32 id_tipe_param = 4;
  {
    int byte_size = _id_tipe_param_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_id_tipe_param(), byte_size, target);
    }
  }

  // repeated int32 id_rute_lama = 5;
  {
    int byte_size = _id_rute_lama_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_id_rute_lama(), byte_size, target);
    }
  }

  // repeated int32 timestamp = 6;
  {
    int byte_size = _timestamp_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_timestamp(), byte_size, target);
    }
  }

  // repeated int32 siklus = 7;
  {
    int byte_size = _siklus_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_siklus(), byte_size, target);
    }
  }

  // repeated int32 id_data_masuk = 8;
  {
    int byte_size = _id_data_masuk_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_id_data_masuk(), byte_size, target);
    }
  }

  // repeated int32 id_date_lama = 9;
  {
    int byte_size = _id_date_lama_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_id_date_lama(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cloud.pesan_server.info_data)
  return target;
}

size_t pesan_server_info_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cloud.pesan_server.info_data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aset = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(aset_.size());
  for (int i = 0, n = aset_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      aset_.Get(i));
  }

  // repeated string rute = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rute_.size());
  for (int i = 0, n = rute_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      rute_.Get(i));
  }

  // repeated int32 id_param_lama = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->id_param_lama_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_param_lama_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 id_tipe_param = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->id_tipe_param_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_tipe_param_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 id_rute_lama = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->id_rute_lama_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_rute_lama_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 timestamp = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->timestamp_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _timestamp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 siklus = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->siklus_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _siklus_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 id_data_masuk = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->id_data_masuk_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_data_masuk_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 id_date_lama = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->id_date_lama_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_date_lama_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pesan_server_info_data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    pesan_server_info_data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pesan_server_info_data::GetClassData() const { return &_class_data_; }

void pesan_server_info_data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<pesan_server_info_data *>(to)->MergeFrom(
      static_cast<const pesan_server_info_data &>(from));
}


void pesan_server_info_data::MergeFrom(const pesan_server_info_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cloud.pesan_server.info_data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  aset_.MergeFrom(from.aset_);
  rute_.MergeFrom(from.rute_);
  id_param_lama_.MergeFrom(from.id_param_lama_);
  id_tipe_param_.MergeFrom(from.id_tipe_param_);
  id_rute_lama_.MergeFrom(from.id_rute_lama_);
  timestamp_.MergeFrom(from.timestamp_);
  siklus_.MergeFrom(from.siklus_);
  id_data_masuk_.MergeFrom(from.id_data_masuk_);
  id_date_lama_.MergeFrom(from.id_date_lama_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pesan_server_info_data::CopyFrom(const pesan_server_info_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cloud.pesan_server.info_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pesan_server_info_data::IsInitialized() const {
  return true;
}

void pesan_server_info_data::InternalSwap(pesan_server_info_data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  aset_.InternalSwap(&other->aset_);
  rute_.InternalSwap(&other->rute_);
  id_param_lama_.InternalSwap(&other->id_param_lama_);
  id_tipe_param_.InternalSwap(&other->id_tipe_param_);
  id_rute_lama_.InternalSwap(&other->id_rute_lama_);
  timestamp_.InternalSwap(&other->timestamp_);
  siklus_.InternalSwap(&other->siklus_);
  id_data_masuk_.InternalSwap(&other->id_data_masuk_);
  id_date_lama_.InternalSwap(&other->id_date_lama_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pesan_server_info_data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cloud_2eproto_getter, &descriptor_table_Cloud_2eproto_once,
      file_level_metadata_Cloud_2eproto[2]);
}

// ===================================================================

class pesan_server::_Internal {
 public:
};

pesan_server::pesan_server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Cloud.pesan_server)
}
pesan_server::pesan_server(const pesan_server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_pesan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    header_pesan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header_pesan().empty()) {
    header_pesan_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header_pesan(), 
      GetArenaForAllocation());
  }
  ::memcpy(&jumlah_data_, &from.jumlah_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_database_) -
    reinterpret_cast<char*>(&jumlah_data_)) + sizeof(id_database_));
  // @@protoc_insertion_point(copy_constructor:Cloud.pesan_server)
}

inline void pesan_server::SharedCtor() {
header_pesan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  header_pesan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&jumlah_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_database_) -
    reinterpret_cast<char*>(&jumlah_data_)) + sizeof(id_database_));
}

pesan_server::~pesan_server() {
  // @@protoc_insertion_point(destructor:Cloud.pesan_server)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void pesan_server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  header_pesan_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void pesan_server::ArenaDtor(void* object) {
  pesan_server* _this = reinterpret_cast< pesan_server* >(object);
  (void)_this;
}
void pesan_server::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pesan_server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pesan_server::Clear() {
// @@protoc_insertion_point(message_clear_start:Cloud.pesan_server)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_pesan_.ClearToEmpty();
  ::memset(&jumlah_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_database_) -
      reinterpret_cast<char*>(&jumlah_data_)) + sizeof(id_database_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pesan_server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string header_pesan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header_pesan();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Cloud.pesan_server.header_pesan"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 jumlah_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          jumlah_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id_database = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          id_database_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* pesan_server::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cloud.pesan_server)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string header_pesan = 1;
  if (!this->_internal_header_pesan().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header_pesan().data(), static_cast<int>(this->_internal_header_pesan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.pesan_server.header_pesan");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header_pesan(), target);
  }

  // int32 jumlah_data = 2;
  if (this->_internal_jumlah_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_jumlah_data(), target);
  }

  // int32 id_database = 3;
  if (this->_internal_id_database() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id_database(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cloud.pesan_server)
  return target;
}

size_t pesan_server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cloud.pesan_server)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string header_pesan = 1;
  if (!this->_internal_header_pesan().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header_pesan());
  }

  // int32 jumlah_data = 2;
  if (this->_internal_jumlah_data() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_jumlah_data());
  }

  // int32 id_database = 3;
  if (this->_internal_id_database() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_database());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pesan_server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    pesan_server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pesan_server::GetClassData() const { return &_class_data_; }

void pesan_server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<pesan_server *>(to)->MergeFrom(
      static_cast<const pesan_server &>(from));
}


void pesan_server::MergeFrom(const pesan_server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cloud.pesan_server)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_header_pesan().empty()) {
    _internal_set_header_pesan(from._internal_header_pesan());
  }
  if (from._internal_jumlah_data() != 0) {
    _internal_set_jumlah_data(from._internal_jumlah_data());
  }
  if (from._internal_id_database() != 0) {
    _internal_set_id_database(from._internal_id_database());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pesan_server::CopyFrom(const pesan_server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cloud.pesan_server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pesan_server::IsInitialized() const {
  return true;
}

void pesan_server::InternalSwap(pesan_server* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &header_pesan_, lhs_arena,
      &other->header_pesan_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pesan_server, id_database_)
      + sizeof(pesan_server::id_database_)
      - PROTOBUF_FIELD_OFFSET(pesan_server, jumlah_data_)>(
          reinterpret_cast<char*>(&jumlah_data_),
          reinterpret_cast<char*>(&other->jumlah_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pesan_server::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cloud_2eproto_getter, &descriptor_table_Cloud_2eproto_once,
      file_level_metadata_Cloud_2eproto[3]);
}

// ===================================================================

class mes_client_isi_data::_Internal {
 public:
};

mes_client_isi_data::mes_client_isi_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Cloud.mes_client.isi_data)
}
mes_client_isi_data::mes_client_isi_data(const mes_client_isi_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    aset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aset().empty()) {
    aset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_aset(), 
      GetArenaForAllocation());
  }
  rute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rute().empty()) {
    rute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rute(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_param().empty()) {
    param_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_param(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_set_param_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(flag_set_param_));
  // @@protoc_insertion_point(copy_constructor:Cloud.mes_client.isi_data)
}

inline void mes_client_isi_data::SharedCtor() {
aset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  aset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flag_set_param_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(flag_set_param_));
}

mes_client_isi_data::~mes_client_isi_data() {
  // @@protoc_insertion_point(destructor:Cloud.mes_client.isi_data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mes_client_isi_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  aset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mes_client_isi_data::ArenaDtor(void* object) {
  mes_client_isi_data* _this = reinterpret_cast< mes_client_isi_data* >(object);
  (void)_this;
}
void mes_client_isi_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mes_client_isi_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mes_client_isi_data::Clear() {
// @@protoc_insertion_point(message_clear_start:Cloud.mes_client.isi_data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aset_.ClearToEmpty();
  rute_.ClearToEmpty();
  data_.ClearToEmpty();
  param_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_set_param_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(flag_set_param_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mes_client_isi_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string aset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_aset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Cloud.mes_client.isi_data.aset"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Cloud.mes_client.isi_data.rute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 siklus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          siklus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flag_set_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          flag_set_param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mes_client_isi_data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cloud.mes_client.isi_data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string aset = 1;
  if (!this->_internal_aset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aset().data(), static_cast<int>(this->_internal_aset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.mes_client.isi_data.aset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_aset(), target);
  }

  // string rute = 2;
  if (!this->_internal_rute().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rute().data(), static_cast<int>(this->_internal_rute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.mes_client.isi_data.rute");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rute(), target);
  }

  // int32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timestamp(), target);
  }

  // int32 siklus = 4;
  if (this->_internal_siklus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_siklus(), target);
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  // bytes param = 6;
  if (!this->_internal_param().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_param(), target);
  }

  // int32 flag_set_param = 7;
  if (this->_internal_flag_set_param() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_flag_set_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cloud.mes_client.isi_data)
  return target;
}

size_t mes_client_isi_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cloud.mes_client.isi_data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string aset = 1;
  if (!this->_internal_aset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aset());
  }

  // string rute = 2;
  if (!this->_internal_rute().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rute());
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes param = 6;
  if (!this->_internal_param().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_param());
  }

  // int32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_timestamp());
  }

  // int32 siklus = 4;
  if (this->_internal_siklus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_siklus());
  }

  // int32 flag_set_param = 7;
  if (this->_internal_flag_set_param() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flag_set_param());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mes_client_isi_data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mes_client_isi_data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mes_client_isi_data::GetClassData() const { return &_class_data_; }

void mes_client_isi_data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<mes_client_isi_data *>(to)->MergeFrom(
      static_cast<const mes_client_isi_data &>(from));
}


void mes_client_isi_data::MergeFrom(const mes_client_isi_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cloud.mes_client.isi_data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_aset().empty()) {
    _internal_set_aset(from._internal_aset());
  }
  if (!from._internal_rute().empty()) {
    _internal_set_rute(from._internal_rute());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (!from._internal_param().empty()) {
    _internal_set_param(from._internal_param());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_siklus() != 0) {
    _internal_set_siklus(from._internal_siklus());
  }
  if (from._internal_flag_set_param() != 0) {
    _internal_set_flag_set_param(from._internal_flag_set_param());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mes_client_isi_data::CopyFrom(const mes_client_isi_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cloud.mes_client.isi_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mes_client_isi_data::IsInitialized() const {
  return true;
}

void mes_client_isi_data::InternalSwap(mes_client_isi_data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &aset_, lhs_arena,
      &other->aset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rute_, lhs_arena,
      &other->rute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &param_, lhs_arena,
      &other->param_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mes_client_isi_data, flag_set_param_)
      + sizeof(mes_client_isi_data::flag_set_param_)
      - PROTOBUF_FIELD_OFFSET(mes_client_isi_data, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mes_client_isi_data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cloud_2eproto_getter, &descriptor_table_Cloud_2eproto_once,
      file_level_metadata_Cloud_2eproto[4]);
}

// ===================================================================

class mes_client_info_data::_Internal {
 public:
};

mes_client_info_data::mes_client_info_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Cloud.mes_client.info_data)
}
mes_client_info_data::mes_client_info_data(const mes_client_info_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_date_lama_, &from.id_date_lama_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_rute_lama_) -
    reinterpret_cast<char*>(&id_date_lama_)) + sizeof(id_rute_lama_));
  // @@protoc_insertion_point(copy_constructor:Cloud.mes_client.info_data)
}

inline void mes_client_info_data::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_date_lama_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_rute_lama_) -
    reinterpret_cast<char*>(&id_date_lama_)) + sizeof(id_rute_lama_));
}

mes_client_info_data::~mes_client_info_data() {
  // @@protoc_insertion_point(destructor:Cloud.mes_client.info_data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mes_client_info_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void mes_client_info_data::ArenaDtor(void* object) {
  mes_client_info_data* _this = reinterpret_cast< mes_client_info_data* >(object);
  (void)_this;
}
void mes_client_info_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mes_client_info_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mes_client_info_data::Clear() {
// @@protoc_insertion_point(message_clear_start:Cloud.mes_client.info_data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_date_lama_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_rute_lama_) -
      reinterpret_cast<char*>(&id_date_lama_)) + sizeof(id_rute_lama_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mes_client_info_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id_date_lama = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_date_lama_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id_data_masuk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          id_data_masuk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id_param_lama = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          id_param_lama_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id_tipe_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          id_tipe_param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id_rute_lama = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          id_rute_lama_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mes_client_info_data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cloud.mes_client.info_data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id_date_lama = 1;
  if (this->_internal_id_date_lama() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id_date_lama(), target);
  }

  // int32 id_data_masuk = 2;
  if (this->_internal_id_data_masuk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id_data_masuk(), target);
  }

  // int32 id_param_lama = 3;
  if (this->_internal_id_param_lama() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id_param_lama(), target);
  }

  // int32 id_tipe_param = 4;
  if (this->_internal_id_tipe_param() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_id_tipe_param(), target);
  }

  // int32 id_rute_lama = 5;
  if (this->_internal_id_rute_lama() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_id_rute_lama(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cloud.mes_client.info_data)
  return target;
}

size_t mes_client_info_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cloud.mes_client.info_data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id_date_lama = 1;
  if (this->_internal_id_date_lama() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_date_lama());
  }

  // int32 id_data_masuk = 2;
  if (this->_internal_id_data_masuk() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_data_masuk());
  }

  // int32 id_param_lama = 3;
  if (this->_internal_id_param_lama() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_param_lama());
  }

  // int32 id_tipe_param = 4;
  if (this->_internal_id_tipe_param() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_tipe_param());
  }

  // int32 id_rute_lama = 5;
  if (this->_internal_id_rute_lama() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_rute_lama());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mes_client_info_data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mes_client_info_data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mes_client_info_data::GetClassData() const { return &_class_data_; }

void mes_client_info_data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<mes_client_info_data *>(to)->MergeFrom(
      static_cast<const mes_client_info_data &>(from));
}


void mes_client_info_data::MergeFrom(const mes_client_info_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cloud.mes_client.info_data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id_date_lama() != 0) {
    _internal_set_id_date_lama(from._internal_id_date_lama());
  }
  if (from._internal_id_data_masuk() != 0) {
    _internal_set_id_data_masuk(from._internal_id_data_masuk());
  }
  if (from._internal_id_param_lama() != 0) {
    _internal_set_id_param_lama(from._internal_id_param_lama());
  }
  if (from._internal_id_tipe_param() != 0) {
    _internal_set_id_tipe_param(from._internal_id_tipe_param());
  }
  if (from._internal_id_rute_lama() != 0) {
    _internal_set_id_rute_lama(from._internal_id_rute_lama());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mes_client_info_data::CopyFrom(const mes_client_info_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cloud.mes_client.info_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mes_client_info_data::IsInitialized() const {
  return true;
}

void mes_client_info_data::InternalSwap(mes_client_info_data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mes_client_info_data, id_rute_lama_)
      + sizeof(mes_client_info_data::id_rute_lama_)
      - PROTOBUF_FIELD_OFFSET(mes_client_info_data, id_date_lama_)>(
          reinterpret_cast<char*>(&id_date_lama_),
          reinterpret_cast<char*>(&other->id_date_lama_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mes_client_info_data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cloud_2eproto_getter, &descriptor_table_Cloud_2eproto_once,
      file_level_metadata_Cloud_2eproto[5]);
}

// ===================================================================

class mes_client::_Internal {
 public:
};

mes_client::mes_client(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Cloud.mes_client)
}
mes_client::mes_client(const mes_client& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_pesan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    header_pesan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header_pesan().empty()) {
    header_pesan_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header_pesan(), 
      GetArenaForAllocation());
  }
  ::memcpy(&jumlah_data_, &from.jumlah_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_database_) -
    reinterpret_cast<char*>(&jumlah_data_)) + sizeof(id_database_));
  // @@protoc_insertion_point(copy_constructor:Cloud.mes_client)
}

inline void mes_client::SharedCtor() {
header_pesan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  header_pesan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&jumlah_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_database_) -
    reinterpret_cast<char*>(&jumlah_data_)) + sizeof(id_database_));
}

mes_client::~mes_client() {
  // @@protoc_insertion_point(destructor:Cloud.mes_client)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mes_client::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  header_pesan_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mes_client::ArenaDtor(void* object) {
  mes_client* _this = reinterpret_cast< mes_client* >(object);
  (void)_this;
}
void mes_client::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mes_client::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mes_client::Clear() {
// @@protoc_insertion_point(message_clear_start:Cloud.mes_client)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_pesan_.ClearToEmpty();
  ::memset(&jumlah_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_database_) -
      reinterpret_cast<char*>(&jumlah_data_)) + sizeof(id_database_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mes_client::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string header_pesan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header_pesan();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Cloud.mes_client.header_pesan"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 jumlah_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          jumlah_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pesan_ke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pesan_ke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flag_info_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          flag_info_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id_database = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          id_database_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mes_client::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cloud.mes_client)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string header_pesan = 1;
  if (!this->_internal_header_pesan().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header_pesan().data(), static_cast<int>(this->_internal_header_pesan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.mes_client.header_pesan");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header_pesan(), target);
  }

  // int32 jumlah_data = 2;
  if (this->_internal_jumlah_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_jumlah_data(), target);
  }

  // int32 pesan_ke = 3;
  if (this->_internal_pesan_ke() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pesan_ke(), target);
  }

  // int32 flag_info_data = 4;
  if (this->_internal_flag_info_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_flag_info_data(), target);
  }

  // int32 id_database = 5;
  if (this->_internal_id_database() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_id_database(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cloud.mes_client)
  return target;
}

size_t mes_client::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cloud.mes_client)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string header_pesan = 1;
  if (!this->_internal_header_pesan().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header_pesan());
  }

  // int32 jumlah_data = 2;
  if (this->_internal_jumlah_data() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_jumlah_data());
  }

  // int32 pesan_ke = 3;
  if (this->_internal_pesan_ke() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pesan_ke());
  }

  // int32 flag_info_data = 4;
  if (this->_internal_flag_info_data() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flag_info_data());
  }

  // int32 id_database = 5;
  if (this->_internal_id_database() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_database());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mes_client::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mes_client::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mes_client::GetClassData() const { return &_class_data_; }

void mes_client::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<mes_client *>(to)->MergeFrom(
      static_cast<const mes_client &>(from));
}


void mes_client::MergeFrom(const mes_client& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cloud.mes_client)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_header_pesan().empty()) {
    _internal_set_header_pesan(from._internal_header_pesan());
  }
  if (from._internal_jumlah_data() != 0) {
    _internal_set_jumlah_data(from._internal_jumlah_data());
  }
  if (from._internal_pesan_ke() != 0) {
    _internal_set_pesan_ke(from._internal_pesan_ke());
  }
  if (from._internal_flag_info_data() != 0) {
    _internal_set_flag_info_data(from._internal_flag_info_data());
  }
  if (from._internal_id_database() != 0) {
    _internal_set_id_database(from._internal_id_database());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mes_client::CopyFrom(const mes_client& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cloud.mes_client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mes_client::IsInitialized() const {
  return true;
}

void mes_client::InternalSwap(mes_client* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &header_pesan_, lhs_arena,
      &other->header_pesan_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mes_client, id_database_)
      + sizeof(mes_client::id_database_)
      - PROTOBUF_FIELD_OFFSET(mes_client, jumlah_data_)>(
          reinterpret_cast<char*>(&jumlah_data_),
          reinterpret_cast<char*>(&other->jumlah_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mes_client::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cloud_2eproto_getter, &descriptor_table_Cloud_2eproto_once,
      file_level_metadata_Cloud_2eproto[6]);
}

// ===================================================================

class mes_server_isi_data::_Internal {
 public:
};

mes_server_isi_data::mes_server_isi_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Cloud.mes_server.isi_data)
}
mes_server_isi_data::mes_server_isi_data(const mes_server_isi_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    aset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aset().empty()) {
    aset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_aset(), 
      GetArenaForAllocation());
  }
  rute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rute().empty()) {
    rute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rute(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_param().empty()) {
    param_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_param(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_set_param_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(flag_set_param_));
  // @@protoc_insertion_point(copy_constructor:Cloud.mes_server.isi_data)
}

inline void mes_server_isi_data::SharedCtor() {
aset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  aset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flag_set_param_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(flag_set_param_));
}

mes_server_isi_data::~mes_server_isi_data() {
  // @@protoc_insertion_point(destructor:Cloud.mes_server.isi_data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mes_server_isi_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  aset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mes_server_isi_data::ArenaDtor(void* object) {
  mes_server_isi_data* _this = reinterpret_cast< mes_server_isi_data* >(object);
  (void)_this;
}
void mes_server_isi_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mes_server_isi_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mes_server_isi_data::Clear() {
// @@protoc_insertion_point(message_clear_start:Cloud.mes_server.isi_data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aset_.ClearToEmpty();
  rute_.ClearToEmpty();
  data_.ClearToEmpty();
  param_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_set_param_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(flag_set_param_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mes_server_isi_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string aset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_aset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Cloud.mes_server.isi_data.aset"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Cloud.mes_server.isi_data.rute"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 siklus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          siklus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flag_set_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          flag_set_param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mes_server_isi_data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cloud.mes_server.isi_data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string aset = 1;
  if (!this->_internal_aset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aset().data(), static_cast<int>(this->_internal_aset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.mes_server.isi_data.aset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_aset(), target);
  }

  // string rute = 2;
  if (!this->_internal_rute().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rute().data(), static_cast<int>(this->_internal_rute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.mes_server.isi_data.rute");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rute(), target);
  }

  // int32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timestamp(), target);
  }

  // int32 siklus = 4;
  if (this->_internal_siklus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_siklus(), target);
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  // bytes param = 6;
  if (!this->_internal_param().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_param(), target);
  }

  // int32 flag_set_param = 7;
  if (this->_internal_flag_set_param() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_flag_set_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cloud.mes_server.isi_data)
  return target;
}

size_t mes_server_isi_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cloud.mes_server.isi_data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string aset = 1;
  if (!this->_internal_aset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aset());
  }

  // string rute = 2;
  if (!this->_internal_rute().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rute());
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes param = 6;
  if (!this->_internal_param().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_param());
  }

  // int32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_timestamp());
  }

  // int32 siklus = 4;
  if (this->_internal_siklus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_siklus());
  }

  // int32 flag_set_param = 7;
  if (this->_internal_flag_set_param() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flag_set_param());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mes_server_isi_data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mes_server_isi_data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mes_server_isi_data::GetClassData() const { return &_class_data_; }

void mes_server_isi_data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<mes_server_isi_data *>(to)->MergeFrom(
      static_cast<const mes_server_isi_data &>(from));
}


void mes_server_isi_data::MergeFrom(const mes_server_isi_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cloud.mes_server.isi_data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_aset().empty()) {
    _internal_set_aset(from._internal_aset());
  }
  if (!from._internal_rute().empty()) {
    _internal_set_rute(from._internal_rute());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (!from._internal_param().empty()) {
    _internal_set_param(from._internal_param());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_siklus() != 0) {
    _internal_set_siklus(from._internal_siklus());
  }
  if (from._internal_flag_set_param() != 0) {
    _internal_set_flag_set_param(from._internal_flag_set_param());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mes_server_isi_data::CopyFrom(const mes_server_isi_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cloud.mes_server.isi_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mes_server_isi_data::IsInitialized() const {
  return true;
}

void mes_server_isi_data::InternalSwap(mes_server_isi_data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &aset_, lhs_arena,
      &other->aset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rute_, lhs_arena,
      &other->rute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &param_, lhs_arena,
      &other->param_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mes_server_isi_data, flag_set_param_)
      + sizeof(mes_server_isi_data::flag_set_param_)
      - PROTOBUF_FIELD_OFFSET(mes_server_isi_data, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mes_server_isi_data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cloud_2eproto_getter, &descriptor_table_Cloud_2eproto_once,
      file_level_metadata_Cloud_2eproto[7]);
}

// ===================================================================

class mes_server_info_data::_Internal {
 public:
};

mes_server_info_data::mes_server_info_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Cloud.mes_server.info_data)
}
mes_server_info_data::mes_server_info_data(const mes_server_info_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_date_lama_, &from.id_date_lama_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_rute_lama_) -
    reinterpret_cast<char*>(&id_date_lama_)) + sizeof(id_rute_lama_));
  // @@protoc_insertion_point(copy_constructor:Cloud.mes_server.info_data)
}

inline void mes_server_info_data::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_date_lama_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_rute_lama_) -
    reinterpret_cast<char*>(&id_date_lama_)) + sizeof(id_rute_lama_));
}

mes_server_info_data::~mes_server_info_data() {
  // @@protoc_insertion_point(destructor:Cloud.mes_server.info_data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mes_server_info_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void mes_server_info_data::ArenaDtor(void* object) {
  mes_server_info_data* _this = reinterpret_cast< mes_server_info_data* >(object);
  (void)_this;
}
void mes_server_info_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mes_server_info_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mes_server_info_data::Clear() {
// @@protoc_insertion_point(message_clear_start:Cloud.mes_server.info_data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_date_lama_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_rute_lama_) -
      reinterpret_cast<char*>(&id_date_lama_)) + sizeof(id_rute_lama_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mes_server_info_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id_date_lama = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_date_lama_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id_data_masuk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          id_data_masuk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id_param_lama = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          id_param_lama_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id_tipe_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          id_tipe_param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id_rute_lama = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          id_rute_lama_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mes_server_info_data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cloud.mes_server.info_data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id_date_lama = 1;
  if (this->_internal_id_date_lama() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id_date_lama(), target);
  }

  // int32 id_data_masuk = 2;
  if (this->_internal_id_data_masuk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id_data_masuk(), target);
  }

  // int32 id_param_lama = 3;
  if (this->_internal_id_param_lama() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id_param_lama(), target);
  }

  // int32 id_tipe_param = 4;
  if (this->_internal_id_tipe_param() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_id_tipe_param(), target);
  }

  // int32 id_rute_lama = 5;
  if (this->_internal_id_rute_lama() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_id_rute_lama(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cloud.mes_server.info_data)
  return target;
}

size_t mes_server_info_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cloud.mes_server.info_data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id_date_lama = 1;
  if (this->_internal_id_date_lama() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_date_lama());
  }

  // int32 id_data_masuk = 2;
  if (this->_internal_id_data_masuk() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_data_masuk());
  }

  // int32 id_param_lama = 3;
  if (this->_internal_id_param_lama() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_param_lama());
  }

  // int32 id_tipe_param = 4;
  if (this->_internal_id_tipe_param() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_tipe_param());
  }

  // int32 id_rute_lama = 5;
  if (this->_internal_id_rute_lama() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_rute_lama());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mes_server_info_data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mes_server_info_data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mes_server_info_data::GetClassData() const { return &_class_data_; }

void mes_server_info_data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<mes_server_info_data *>(to)->MergeFrom(
      static_cast<const mes_server_info_data &>(from));
}


void mes_server_info_data::MergeFrom(const mes_server_info_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cloud.mes_server.info_data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id_date_lama() != 0) {
    _internal_set_id_date_lama(from._internal_id_date_lama());
  }
  if (from._internal_id_data_masuk() != 0) {
    _internal_set_id_data_masuk(from._internal_id_data_masuk());
  }
  if (from._internal_id_param_lama() != 0) {
    _internal_set_id_param_lama(from._internal_id_param_lama());
  }
  if (from._internal_id_tipe_param() != 0) {
    _internal_set_id_tipe_param(from._internal_id_tipe_param());
  }
  if (from._internal_id_rute_lama() != 0) {
    _internal_set_id_rute_lama(from._internal_id_rute_lama());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mes_server_info_data::CopyFrom(const mes_server_info_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cloud.mes_server.info_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mes_server_info_data::IsInitialized() const {
  return true;
}

void mes_server_info_data::InternalSwap(mes_server_info_data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mes_server_info_data, id_rute_lama_)
      + sizeof(mes_server_info_data::id_rute_lama_)
      - PROTOBUF_FIELD_OFFSET(mes_server_info_data, id_date_lama_)>(
          reinterpret_cast<char*>(&id_date_lama_),
          reinterpret_cast<char*>(&other->id_date_lama_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mes_server_info_data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cloud_2eproto_getter, &descriptor_table_Cloud_2eproto_once,
      file_level_metadata_Cloud_2eproto[8]);
}

// ===================================================================

class mes_server::_Internal {
 public:
};

mes_server::mes_server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Cloud.mes_server)
}
mes_server::mes_server(const mes_server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_pesan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    header_pesan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header_pesan().empty()) {
    header_pesan_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header_pesan(), 
      GetArenaForAllocation());
  }
  ::memcpy(&jumlah_data_, &from.jumlah_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_database_) -
    reinterpret_cast<char*>(&jumlah_data_)) + sizeof(id_database_));
  // @@protoc_insertion_point(copy_constructor:Cloud.mes_server)
}

inline void mes_server::SharedCtor() {
header_pesan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  header_pesan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&jumlah_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_database_) -
    reinterpret_cast<char*>(&jumlah_data_)) + sizeof(id_database_));
}

mes_server::~mes_server() {
  // @@protoc_insertion_point(destructor:Cloud.mes_server)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mes_server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  header_pesan_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mes_server::ArenaDtor(void* object) {
  mes_server* _this = reinterpret_cast< mes_server* >(object);
  (void)_this;
}
void mes_server::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mes_server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mes_server::Clear() {
// @@protoc_insertion_point(message_clear_start:Cloud.mes_server)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_pesan_.ClearToEmpty();
  ::memset(&jumlah_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_database_) -
      reinterpret_cast<char*>(&jumlah_data_)) + sizeof(id_database_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mes_server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string header_pesan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header_pesan();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Cloud.mes_server.header_pesan"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 jumlah_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          jumlah_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pesan_ke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pesan_ke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flag_info_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          flag_info_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id_database = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          id_database_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mes_server::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cloud.mes_server)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string header_pesan = 1;
  if (!this->_internal_header_pesan().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header_pesan().data(), static_cast<int>(this->_internal_header_pesan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.mes_server.header_pesan");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header_pesan(), target);
  }

  // int32 jumlah_data = 2;
  if (this->_internal_jumlah_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_jumlah_data(), target);
  }

  // int32 pesan_ke = 3;
  if (this->_internal_pesan_ke() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pesan_ke(), target);
  }

  // int32 flag_info_data = 4;
  if (this->_internal_flag_info_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_flag_info_data(), target);
  }

  // int32 id_database = 5;
  if (this->_internal_id_database() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_id_database(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cloud.mes_server)
  return target;
}

size_t mes_server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cloud.mes_server)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string header_pesan = 1;
  if (!this->_internal_header_pesan().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header_pesan());
  }

  // int32 jumlah_data = 2;
  if (this->_internal_jumlah_data() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_jumlah_data());
  }

  // int32 pesan_ke = 3;
  if (this->_internal_pesan_ke() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pesan_ke());
  }

  // int32 flag_info_data = 4;
  if (this->_internal_flag_info_data() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flag_info_data());
  }

  // int32 id_database = 5;
  if (this->_internal_id_database() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_database());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mes_server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mes_server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mes_server::GetClassData() const { return &_class_data_; }

void mes_server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<mes_server *>(to)->MergeFrom(
      static_cast<const mes_server &>(from));
}


void mes_server::MergeFrom(const mes_server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cloud.mes_server)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_header_pesan().empty()) {
    _internal_set_header_pesan(from._internal_header_pesan());
  }
  if (from._internal_jumlah_data() != 0) {
    _internal_set_jumlah_data(from._internal_jumlah_data());
  }
  if (from._internal_pesan_ke() != 0) {
    _internal_set_pesan_ke(from._internal_pesan_ke());
  }
  if (from._internal_flag_info_data() != 0) {
    _internal_set_flag_info_data(from._internal_flag_info_data());
  }
  if (from._internal_id_database() != 0) {
    _internal_set_id_database(from._internal_id_database());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mes_server::CopyFrom(const mes_server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cloud.mes_server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mes_server::IsInitialized() const {
  return true;
}

void mes_server::InternalSwap(mes_server* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &header_pesan_, lhs_arena,
      &other->header_pesan_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mes_server, id_database_)
      + sizeof(mes_server::id_database_)
      - PROTOBUF_FIELD_OFFSET(mes_server, jumlah_data_)>(
          reinterpret_cast<char*>(&jumlah_data_),
          reinterpret_cast<char*>(&other->jumlah_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mes_server::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Cloud_2eproto_getter, &descriptor_table_Cloud_2eproto_once,
      file_level_metadata_Cloud_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Cloud
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Cloud::pesan_client_info_data* Arena::CreateMaybeMessage< ::Cloud::pesan_client_info_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Cloud::pesan_client_info_data >(arena);
}
template<> PROTOBUF_NOINLINE ::Cloud::pesan_client* Arena::CreateMaybeMessage< ::Cloud::pesan_client >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Cloud::pesan_client >(arena);
}
template<> PROTOBUF_NOINLINE ::Cloud::pesan_server_info_data* Arena::CreateMaybeMessage< ::Cloud::pesan_server_info_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Cloud::pesan_server_info_data >(arena);
}
template<> PROTOBUF_NOINLINE ::Cloud::pesan_server* Arena::CreateMaybeMessage< ::Cloud::pesan_server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Cloud::pesan_server >(arena);
}
template<> PROTOBUF_NOINLINE ::Cloud::mes_client_isi_data* Arena::CreateMaybeMessage< ::Cloud::mes_client_isi_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Cloud::mes_client_isi_data >(arena);
}
template<> PROTOBUF_NOINLINE ::Cloud::mes_client_info_data* Arena::CreateMaybeMessage< ::Cloud::mes_client_info_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Cloud::mes_client_info_data >(arena);
}
template<> PROTOBUF_NOINLINE ::Cloud::mes_client* Arena::CreateMaybeMessage< ::Cloud::mes_client >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Cloud::mes_client >(arena);
}
template<> PROTOBUF_NOINLINE ::Cloud::mes_server_isi_data* Arena::CreateMaybeMessage< ::Cloud::mes_server_isi_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Cloud::mes_server_isi_data >(arena);
}
template<> PROTOBUF_NOINLINE ::Cloud::mes_server_info_data* Arena::CreateMaybeMessage< ::Cloud::mes_server_info_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Cloud::mes_server_info_data >(arena);
}
template<> PROTOBUF_NOINLINE ::Cloud::mes_server* Arena::CreateMaybeMessage< ::Cloud::mes_server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Cloud::mes_server >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
