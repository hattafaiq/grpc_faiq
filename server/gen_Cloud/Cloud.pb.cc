// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cloud.proto

#include "Cloud.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Cloud {
PROTOBUF_CONSTEXPR pesan_client::pesan_client(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aset_)*/{}
  , /*decltype(_impl_.rute_)*/{}
  , /*decltype(_impl_.id_param_lama_)*/{}
  , /*decltype(_impl_._id_param_lama_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_tipe_param_)*/{}
  , /*decltype(_impl_._id_tipe_param_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_rute_lama_)*/{}
  , /*decltype(_impl_._id_rute_lama_cached_byte_size_)*/{0}
  , /*decltype(_impl_.timestamp_)*/{}
  , /*decltype(_impl_._timestamp_cached_byte_size_)*/{0}
  , /*decltype(_impl_.siklus_)*/{}
  , /*decltype(_impl_._siklus_cached_byte_size_)*/{0}
  , /*decltype(_impl_.header_pesan_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jumlah_data_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct pesan_clientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR pesan_clientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~pesan_clientDefaultTypeInternal() {}
  union {
    pesan_client _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 pesan_clientDefaultTypeInternal _pesan_client_default_instance_;
PROTOBUF_CONSTEXPR pesan_server::pesan_server(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aset_)*/{}
  , /*decltype(_impl_.rute_)*/{}
  , /*decltype(_impl_.id_param_lama_)*/{}
  , /*decltype(_impl_._id_param_lama_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_tipe_param_)*/{}
  , /*decltype(_impl_._id_tipe_param_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_rute_lama_)*/{}
  , /*decltype(_impl_._id_rute_lama_cached_byte_size_)*/{0}
  , /*decltype(_impl_.timestamp_)*/{}
  , /*decltype(_impl_._timestamp_cached_byte_size_)*/{0}
  , /*decltype(_impl_.siklus_)*/{}
  , /*decltype(_impl_._siklus_cached_byte_size_)*/{0}
  , /*decltype(_impl_.header_pesan_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jumlah_data_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct pesan_serverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR pesan_serverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~pesan_serverDefaultTypeInternal() {}
  union {
    pesan_server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 pesan_serverDefaultTypeInternal _pesan_server_default_instance_;
}  // namespace Cloud
static ::_pb::Metadata file_level_metadata_Cloud_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Cloud_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Cloud_2eproto = nullptr;

const uint32_t TableStruct_Cloud_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client, _impl_.header_pesan_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client, _impl_.aset_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client, _impl_.rute_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client, _impl_.id_param_lama_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client, _impl_.id_tipe_param_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client, _impl_.id_rute_lama_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client, _impl_.siklus_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_client, _impl_.jumlah_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server, _impl_.header_pesan_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server, _impl_.aset_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server, _impl_.rute_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server, _impl_.id_param_lama_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server, _impl_.id_tipe_param_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server, _impl_.id_rute_lama_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server, _impl_.siklus_),
  PROTOBUF_FIELD_OFFSET(::Cloud::pesan_server, _impl_.jumlah_data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Cloud::pesan_client)},
  { 15, -1, -1, sizeof(::Cloud::pesan_server)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Cloud::_pesan_client_default_instance_._instance,
  &::Cloud::_pesan_server_default_instance_._instance,
};

const char descriptor_table_protodef_Cloud_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Cloud.proto\022\005Cloud\"\274\001\n\014pesan_client\022\024\n"
  "\014header_pesan\030\001 \001(\t\022\014\n\004aset\030\002 \003(\t\022\014\n\004rut"
  "e\030\003 \003(\t\022\025\n\rid_param_lama\030\004 \003(\005\022\025\n\rid_tip"
  "e_param\030\005 \003(\005\022\024\n\014id_rute_lama\030\006 \003(\005\022\021\n\tt"
  "imestamp\030\007 \003(\005\022\016\n\006siklus\030\010 \003(\005\022\023\n\013jumlah"
  "_data\030\t \001(\005\"\274\001\n\014pesan_server\022\024\n\014header_p"
  "esan\030\001 \001(\t\022\014\n\004aset\030\002 \003(\t\022\014\n\004rute\030\003 \003(\t\022\025"
  "\n\rid_param_lama\030\004 \003(\005\022\025\n\rid_tipe_param\030\005"
  " \003(\005\022\024\n\014id_rute_lama\030\006 \003(\005\022\021\n\ttimestamp\030"
  "\007 \003(\005\022\016\n\006siklus\030\010 \003(\005\022\023\n\013jumlah_data\030\t \001"
  "(\0052H\n\nprotokol_1\022:\n\014initial_data\022\023.Cloud"
  ".pesan_client\032\023.Cloud.pesan_server\"\000b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_Cloud_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Cloud_2eproto = {
    false, false, 484, descriptor_table_protodef_Cloud_2eproto,
    "Cloud.proto",
    &descriptor_table_Cloud_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_Cloud_2eproto::offsets,
    file_level_metadata_Cloud_2eproto, file_level_enum_descriptors_Cloud_2eproto,
    file_level_service_descriptors_Cloud_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Cloud_2eproto_getter() {
  return &descriptor_table_Cloud_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Cloud_2eproto(&descriptor_table_Cloud_2eproto);
namespace Cloud {

// ===================================================================

class pesan_client::_Internal {
 public:
};

pesan_client::pesan_client(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Cloud.pesan_client)
}
pesan_client::pesan_client(const pesan_client& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  pesan_client* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aset_){from._impl_.aset_}
    , decltype(_impl_.rute_){from._impl_.rute_}
    , decltype(_impl_.id_param_lama_){from._impl_.id_param_lama_}
    , /*decltype(_impl_._id_param_lama_cached_byte_size_)*/{0}
    , decltype(_impl_.id_tipe_param_){from._impl_.id_tipe_param_}
    , /*decltype(_impl_._id_tipe_param_cached_byte_size_)*/{0}
    , decltype(_impl_.id_rute_lama_){from._impl_.id_rute_lama_}
    , /*decltype(_impl_._id_rute_lama_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamp_){from._impl_.timestamp_}
    , /*decltype(_impl_._timestamp_cached_byte_size_)*/{0}
    , decltype(_impl_.siklus_){from._impl_.siklus_}
    , /*decltype(_impl_._siklus_cached_byte_size_)*/{0}
    , decltype(_impl_.header_pesan_){}
    , decltype(_impl_.jumlah_data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.header_pesan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_pesan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header_pesan().empty()) {
    _this->_impl_.header_pesan_.Set(from._internal_header_pesan(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.jumlah_data_ = from._impl_.jumlah_data_;
  // @@protoc_insertion_point(copy_constructor:Cloud.pesan_client)
}

inline void pesan_client::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aset_){arena}
    , decltype(_impl_.rute_){arena}
    , decltype(_impl_.id_param_lama_){arena}
    , /*decltype(_impl_._id_param_lama_cached_byte_size_)*/{0}
    , decltype(_impl_.id_tipe_param_){arena}
    , /*decltype(_impl_._id_tipe_param_cached_byte_size_)*/{0}
    , decltype(_impl_.id_rute_lama_){arena}
    , /*decltype(_impl_._id_rute_lama_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamp_){arena}
    , /*decltype(_impl_._timestamp_cached_byte_size_)*/{0}
    , decltype(_impl_.siklus_){arena}
    , /*decltype(_impl_._siklus_cached_byte_size_)*/{0}
    , decltype(_impl_.header_pesan_){}
    , decltype(_impl_.jumlah_data_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.header_pesan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_pesan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

pesan_client::~pesan_client() {
  // @@protoc_insertion_point(destructor:Cloud.pesan_client)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void pesan_client::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.aset_.~RepeatedPtrField();
  _impl_.rute_.~RepeatedPtrField();
  _impl_.id_param_lama_.~RepeatedField();
  _impl_.id_tipe_param_.~RepeatedField();
  _impl_.id_rute_lama_.~RepeatedField();
  _impl_.timestamp_.~RepeatedField();
  _impl_.siklus_.~RepeatedField();
  _impl_.header_pesan_.Destroy();
}

void pesan_client::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void pesan_client::Clear() {
// @@protoc_insertion_point(message_clear_start:Cloud.pesan_client)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aset_.Clear();
  _impl_.rute_.Clear();
  _impl_.id_param_lama_.Clear();
  _impl_.id_tipe_param_.Clear();
  _impl_.id_rute_lama_.Clear();
  _impl_.timestamp_.Clear();
  _impl_.siklus_.Clear();
  _impl_.header_pesan_.ClearToEmpty();
  _impl_.jumlah_data_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pesan_client::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string header_pesan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header_pesan();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Cloud.pesan_client.header_pesan"));
        } else
          goto handle_unusual;
        continue;
      // repeated string aset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aset();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Cloud.pesan_client.aset"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string rute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rute();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Cloud.pesan_client.rute"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_param_lama = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_param_lama(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_id_param_lama(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_tipe_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_tipe_param(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_id_tipe_param(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_rute_lama = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_rute_lama(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_id_rute_lama(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 siklus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_siklus(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_siklus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 jumlah_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.jumlah_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* pesan_client::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cloud.pesan_client)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string header_pesan = 1;
  if (!this->_internal_header_pesan().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header_pesan().data(), static_cast<int>(this->_internal_header_pesan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.pesan_client.header_pesan");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header_pesan(), target);
  }

  // repeated string aset = 2;
  for (int i = 0, n = this->_internal_aset_size(); i < n; i++) {
    const auto& s = this->_internal_aset(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.pesan_client.aset");
    target = stream->WriteString(2, s, target);
  }

  // repeated string rute = 3;
  for (int i = 0, n = this->_internal_rute_size(); i < n; i++) {
    const auto& s = this->_internal_rute(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.pesan_client.rute");
    target = stream->WriteString(3, s, target);
  }

  // repeated int32 id_param_lama = 4;
  {
    int byte_size = _impl_._id_param_lama_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_id_param_lama(), byte_size, target);
    }
  }

  // repeated int32 id_tipe_param = 5;
  {
    int byte_size = _impl_._id_tipe_param_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_id_tipe_param(), byte_size, target);
    }
  }

  // repeated int32 id_rute_lama = 6;
  {
    int byte_size = _impl_._id_rute_lama_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_id_rute_lama(), byte_size, target);
    }
  }

  // repeated int32 timestamp = 7;
  {
    int byte_size = _impl_._timestamp_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_timestamp(), byte_size, target);
    }
  }

  // repeated int32 siklus = 8;
  {
    int byte_size = _impl_._siklus_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_siklus(), byte_size, target);
    }
  }

  // int32 jumlah_data = 9;
  if (this->_internal_jumlah_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_jumlah_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cloud.pesan_client)
  return target;
}

size_t pesan_client::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cloud.pesan_client)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aset = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.aset_.size());
  for (int i = 0, n = _impl_.aset_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.aset_.Get(i));
  }

  // repeated string rute = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.rute_.size());
  for (int i = 0, n = _impl_.rute_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.rute_.Get(i));
  }

  // repeated int32 id_param_lama = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.id_param_lama_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._id_param_lama_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 id_tipe_param = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.id_tipe_param_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._id_tipe_param_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 id_rute_lama = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.id_rute_lama_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._id_rute_lama_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 timestamp = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.timestamp_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._timestamp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 siklus = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.siklus_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._siklus_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string header_pesan = 1;
  if (!this->_internal_header_pesan().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header_pesan());
  }

  // int32 jumlah_data = 9;
  if (this->_internal_jumlah_data() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_jumlah_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pesan_client::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    pesan_client::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pesan_client::GetClassData() const { return &_class_data_; }


void pesan_client::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<pesan_client*>(&to_msg);
  auto& from = static_cast<const pesan_client&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Cloud.pesan_client)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.aset_.MergeFrom(from._impl_.aset_);
  _this->_impl_.rute_.MergeFrom(from._impl_.rute_);
  _this->_impl_.id_param_lama_.MergeFrom(from._impl_.id_param_lama_);
  _this->_impl_.id_tipe_param_.MergeFrom(from._impl_.id_tipe_param_);
  _this->_impl_.id_rute_lama_.MergeFrom(from._impl_.id_rute_lama_);
  _this->_impl_.timestamp_.MergeFrom(from._impl_.timestamp_);
  _this->_impl_.siklus_.MergeFrom(from._impl_.siklus_);
  if (!from._internal_header_pesan().empty()) {
    _this->_internal_set_header_pesan(from._internal_header_pesan());
  }
  if (from._internal_jumlah_data() != 0) {
    _this->_internal_set_jumlah_data(from._internal_jumlah_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pesan_client::CopyFrom(const pesan_client& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cloud.pesan_client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pesan_client::IsInitialized() const {
  return true;
}

void pesan_client::InternalSwap(pesan_client* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.aset_.InternalSwap(&other->_impl_.aset_);
  _impl_.rute_.InternalSwap(&other->_impl_.rute_);
  _impl_.id_param_lama_.InternalSwap(&other->_impl_.id_param_lama_);
  _impl_.id_tipe_param_.InternalSwap(&other->_impl_.id_tipe_param_);
  _impl_.id_rute_lama_.InternalSwap(&other->_impl_.id_rute_lama_);
  _impl_.timestamp_.InternalSwap(&other->_impl_.timestamp_);
  _impl_.siklus_.InternalSwap(&other->_impl_.siklus_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.header_pesan_, lhs_arena,
      &other->_impl_.header_pesan_, rhs_arena
  );
  swap(_impl_.jumlah_data_, other->_impl_.jumlah_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pesan_client::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Cloud_2eproto_getter, &descriptor_table_Cloud_2eproto_once,
      file_level_metadata_Cloud_2eproto[0]);
}

// ===================================================================

class pesan_server::_Internal {
 public:
};

pesan_server::pesan_server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Cloud.pesan_server)
}
pesan_server::pesan_server(const pesan_server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  pesan_server* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aset_){from._impl_.aset_}
    , decltype(_impl_.rute_){from._impl_.rute_}
    , decltype(_impl_.id_param_lama_){from._impl_.id_param_lama_}
    , /*decltype(_impl_._id_param_lama_cached_byte_size_)*/{0}
    , decltype(_impl_.id_tipe_param_){from._impl_.id_tipe_param_}
    , /*decltype(_impl_._id_tipe_param_cached_byte_size_)*/{0}
    , decltype(_impl_.id_rute_lama_){from._impl_.id_rute_lama_}
    , /*decltype(_impl_._id_rute_lama_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamp_){from._impl_.timestamp_}
    , /*decltype(_impl_._timestamp_cached_byte_size_)*/{0}
    , decltype(_impl_.siklus_){from._impl_.siklus_}
    , /*decltype(_impl_._siklus_cached_byte_size_)*/{0}
    , decltype(_impl_.header_pesan_){}
    , decltype(_impl_.jumlah_data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.header_pesan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_pesan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header_pesan().empty()) {
    _this->_impl_.header_pesan_.Set(from._internal_header_pesan(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.jumlah_data_ = from._impl_.jumlah_data_;
  // @@protoc_insertion_point(copy_constructor:Cloud.pesan_server)
}

inline void pesan_server::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aset_){arena}
    , decltype(_impl_.rute_){arena}
    , decltype(_impl_.id_param_lama_){arena}
    , /*decltype(_impl_._id_param_lama_cached_byte_size_)*/{0}
    , decltype(_impl_.id_tipe_param_){arena}
    , /*decltype(_impl_._id_tipe_param_cached_byte_size_)*/{0}
    , decltype(_impl_.id_rute_lama_){arena}
    , /*decltype(_impl_._id_rute_lama_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamp_){arena}
    , /*decltype(_impl_._timestamp_cached_byte_size_)*/{0}
    , decltype(_impl_.siklus_){arena}
    , /*decltype(_impl_._siklus_cached_byte_size_)*/{0}
    , decltype(_impl_.header_pesan_){}
    , decltype(_impl_.jumlah_data_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.header_pesan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_pesan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

pesan_server::~pesan_server() {
  // @@protoc_insertion_point(destructor:Cloud.pesan_server)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void pesan_server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.aset_.~RepeatedPtrField();
  _impl_.rute_.~RepeatedPtrField();
  _impl_.id_param_lama_.~RepeatedField();
  _impl_.id_tipe_param_.~RepeatedField();
  _impl_.id_rute_lama_.~RepeatedField();
  _impl_.timestamp_.~RepeatedField();
  _impl_.siklus_.~RepeatedField();
  _impl_.header_pesan_.Destroy();
}

void pesan_server::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void pesan_server::Clear() {
// @@protoc_insertion_point(message_clear_start:Cloud.pesan_server)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aset_.Clear();
  _impl_.rute_.Clear();
  _impl_.id_param_lama_.Clear();
  _impl_.id_tipe_param_.Clear();
  _impl_.id_rute_lama_.Clear();
  _impl_.timestamp_.Clear();
  _impl_.siklus_.Clear();
  _impl_.header_pesan_.ClearToEmpty();
  _impl_.jumlah_data_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pesan_server::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string header_pesan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header_pesan();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Cloud.pesan_server.header_pesan"));
        } else
          goto handle_unusual;
        continue;
      // repeated string aset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aset();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Cloud.pesan_server.aset"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string rute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rute();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Cloud.pesan_server.rute"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_param_lama = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_param_lama(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_id_param_lama(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_tipe_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_tipe_param(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_id_tipe_param(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 id_rute_lama = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_id_rute_lama(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_id_rute_lama(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 siklus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_siklus(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_siklus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 jumlah_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.jumlah_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* pesan_server::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cloud.pesan_server)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string header_pesan = 1;
  if (!this->_internal_header_pesan().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header_pesan().data(), static_cast<int>(this->_internal_header_pesan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.pesan_server.header_pesan");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header_pesan(), target);
  }

  // repeated string aset = 2;
  for (int i = 0, n = this->_internal_aset_size(); i < n; i++) {
    const auto& s = this->_internal_aset(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.pesan_server.aset");
    target = stream->WriteString(2, s, target);
  }

  // repeated string rute = 3;
  for (int i = 0, n = this->_internal_rute_size(); i < n; i++) {
    const auto& s = this->_internal_rute(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Cloud.pesan_server.rute");
    target = stream->WriteString(3, s, target);
  }

  // repeated int32 id_param_lama = 4;
  {
    int byte_size = _impl_._id_param_lama_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_id_param_lama(), byte_size, target);
    }
  }

  // repeated int32 id_tipe_param = 5;
  {
    int byte_size = _impl_._id_tipe_param_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_id_tipe_param(), byte_size, target);
    }
  }

  // repeated int32 id_rute_lama = 6;
  {
    int byte_size = _impl_._id_rute_lama_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_id_rute_lama(), byte_size, target);
    }
  }

  // repeated int32 timestamp = 7;
  {
    int byte_size = _impl_._timestamp_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_timestamp(), byte_size, target);
    }
  }

  // repeated int32 siklus = 8;
  {
    int byte_size = _impl_._siklus_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_siklus(), byte_size, target);
    }
  }

  // int32 jumlah_data = 9;
  if (this->_internal_jumlah_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_jumlah_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cloud.pesan_server)
  return target;
}

size_t pesan_server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cloud.pesan_server)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aset = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.aset_.size());
  for (int i = 0, n = _impl_.aset_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.aset_.Get(i));
  }

  // repeated string rute = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.rute_.size());
  for (int i = 0, n = _impl_.rute_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.rute_.Get(i));
  }

  // repeated int32 id_param_lama = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.id_param_lama_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._id_param_lama_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 id_tipe_param = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.id_tipe_param_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._id_tipe_param_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 id_rute_lama = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.id_rute_lama_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._id_rute_lama_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 timestamp = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.timestamp_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._timestamp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 siklus = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.siklus_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._siklus_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string header_pesan = 1;
  if (!this->_internal_header_pesan().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header_pesan());
  }

  // int32 jumlah_data = 9;
  if (this->_internal_jumlah_data() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_jumlah_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pesan_server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    pesan_server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pesan_server::GetClassData() const { return &_class_data_; }


void pesan_server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<pesan_server*>(&to_msg);
  auto& from = static_cast<const pesan_server&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Cloud.pesan_server)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.aset_.MergeFrom(from._impl_.aset_);
  _this->_impl_.rute_.MergeFrom(from._impl_.rute_);
  _this->_impl_.id_param_lama_.MergeFrom(from._impl_.id_param_lama_);
  _this->_impl_.id_tipe_param_.MergeFrom(from._impl_.id_tipe_param_);
  _this->_impl_.id_rute_lama_.MergeFrom(from._impl_.id_rute_lama_);
  _this->_impl_.timestamp_.MergeFrom(from._impl_.timestamp_);
  _this->_impl_.siklus_.MergeFrom(from._impl_.siklus_);
  if (!from._internal_header_pesan().empty()) {
    _this->_internal_set_header_pesan(from._internal_header_pesan());
  }
  if (from._internal_jumlah_data() != 0) {
    _this->_internal_set_jumlah_data(from._internal_jumlah_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pesan_server::CopyFrom(const pesan_server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cloud.pesan_server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pesan_server::IsInitialized() const {
  return true;
}

void pesan_server::InternalSwap(pesan_server* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.aset_.InternalSwap(&other->_impl_.aset_);
  _impl_.rute_.InternalSwap(&other->_impl_.rute_);
  _impl_.id_param_lama_.InternalSwap(&other->_impl_.id_param_lama_);
  _impl_.id_tipe_param_.InternalSwap(&other->_impl_.id_tipe_param_);
  _impl_.id_rute_lama_.InternalSwap(&other->_impl_.id_rute_lama_);
  _impl_.timestamp_.InternalSwap(&other->_impl_.timestamp_);
  _impl_.siklus_.InternalSwap(&other->_impl_.siklus_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.header_pesan_, lhs_arena,
      &other->_impl_.header_pesan_, rhs_arena
  );
  swap(_impl_.jumlah_data_, other->_impl_.jumlah_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pesan_server::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Cloud_2eproto_getter, &descriptor_table_Cloud_2eproto_once,
      file_level_metadata_Cloud_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Cloud
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Cloud::pesan_client*
Arena::CreateMaybeMessage< ::Cloud::pesan_client >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Cloud::pesan_client >(arena);
}
template<> PROTOBUF_NOINLINE ::Cloud::pesan_server*
Arena::CreateMaybeMessage< ::Cloud::pesan_server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Cloud::pesan_server >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
